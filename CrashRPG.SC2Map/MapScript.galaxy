//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Crash RPG II
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_survivorBasePlayer = 13;
const int gv_alienPlayer = 14;
const fixed gv_damageFraction = 0.0625;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_attackWave;
int gv_remainingSelectors;
playergroup gv_survivors;

void InitGlobals () {
    gv_survivors = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SpawnAlienLoop (int lp_totalWeight, int lp_maxWeight);
unit gf_SpawnAlien (string lp_alienType, point lp_spawnPoint);
string gf_SetRandomAlien (int lp_alienWeight);
string gf_SetAlienType1 ();
string gf_SetAlienType2 ();
string gf_SetAlienType4 ();
string gf_SetAlienType6 ();
string gf_SetAlienType8 ();
string gf_SetAlienType24 ();
int gf_GetAlienWeight (string lp_alienType);
int gf_GetAlienCount (string lp_alienType);
void gf_CreateSelectableHero (string lp_heroName);
void gf_UpdateTooltip (unit lp_affectedUnit, string lp_button, string lp_tooltip);
point gf_GetOppositePoint (point lp_point, point lp_center);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_AttackWaves;
trigger gt_AlienTrickle;
trigger gt_HeroSelection;
trigger gt_FreeHeroes;
trigger gt_CreateHeroSelection;
trigger gt_DisableTurrets;
trigger gt_MapInitialization;
trigger gt_PlayerLeaves;
trigger gt_StartBattlecruiserScene;
trigger gt_BattlecruiserCrash;
trigger gt_UpdateTooltips;
trigger gt_VictoryCondition;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_SpawnAlienLoop_Trigger = null;
int auto_gf_SpawnAlienLoop_lp_totalWeight;
int auto_gf_SpawnAlienLoop_lp_maxWeight;

void gf_SpawnAlienLoop (int lp_totalWeight, int lp_maxWeight) {
    auto_gf_SpawnAlienLoop_lp_totalWeight = lp_totalWeight;
    auto_gf_SpawnAlienLoop_lp_maxWeight = lp_maxWeight;

    if (auto_gf_SpawnAlienLoop_Trigger == null) {
        auto_gf_SpawnAlienLoop_Trigger = TriggerCreate("auto_gf_SpawnAlienLoop_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnAlienLoop_Trigger, false, false);
}

bool auto_gf_SpawnAlienLoop_TriggerFunc (bool testConds, bool runActions) {
    int lp_totalWeight = auto_gf_SpawnAlienLoop_lp_totalWeight;
    int lp_maxWeight = auto_gf_SpawnAlienLoop_lp_maxWeight;

    // Variable Declarations
    int lv_currentAlienWeight;
    unit lv_spawnedUnit;
    string lv_spawnedUnitType;
    point lv_spawnPoint;
    int lv_pickedNumber;

    // Automatic Variable Declarations
    int auto7E7E1B7B_ae;
    const int auto7E7E1B7B_ai = 1;

    // Variable Initialization
    lv_currentAlienWeight = lp_totalWeight;

    // Implementation
    while ((lv_currentAlienWeight >= 1)) {
        lv_spawnedUnitType = gf_SetRandomAlien(MinI(lv_currentAlienWeight, lp_maxWeight));
        lv_spawnPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroup("NydusNetwork", gv_alienPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        auto7E7E1B7B_ae = gf_GetAlienCount(lv_spawnedUnitType);
        lv_pickedNumber = 1;
        for ( ; ( (auto7E7E1B7B_ai >= 0 && lv_pickedNumber <= auto7E7E1B7B_ae) || (auto7E7E1B7B_ai < 0 && lv_pickedNumber >= auto7E7E1B7B_ae) ) ; lv_pickedNumber += auto7E7E1B7B_ai ) {
            lv_spawnedUnit = gf_SpawnAlien(lv_spawnedUnitType, lv_spawnPoint);
            UnitIssueOrder(lv_spawnedUnit, OrderTargetingPoint(AbilityCommand("move", 1), Point(((PointGetX(RegionGetCenter(RegionFromId(1))) * 2.0) - PointGetX(UnitGetPosition(lv_spawnedUnit))), ((PointGetY(RegionGetCenter(RegionFromId(1))) * 2.0) - PointGetY(UnitGetPosition(lv_spawnedUnit))))), c_orderQueueReplace);
        }
        lv_currentAlienWeight -= gf_GetAlienWeight(lv_spawnedUnitType);
        Wait(0.1, c_timeGame);
    }
    return true;
}

unit gf_SpawnAlien (string lp_alienType, point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_alienType, 0, gv_alienPlayer, lp_spawnPoint);
    SoundPlayOnUnitForPlayer(SoundLink("NydusWorm_Unload", 0), gv_alienPlayer, PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    return UnitLastCreated();
}

string gf_SetRandomAlien (int lp_alienWeight) {
    // Variable Declarations
    int lv_roll;
    int lv_rollRoof;
    string lv_spawnedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnedUnit = "Zergling";

    // Implementation
    if ((lp_alienWeight >= 24)) {
        lv_rollRoof = 59;
    }
    else if ((lp_alienWeight >= 8)) {
        lv_rollRoof = 58;
    }
    else if ((lp_alienWeight >= 6)) {
        lv_rollRoof = 56;
    }
    else if ((lp_alienWeight >= 4)) {
        lv_rollRoof = 50;
    }
    else if ((lp_alienWeight >= 2)) {
        lv_rollRoof = 40;
    }
    else if (true) {
        return gf_SetAlienType1();
    }
    lv_roll = RandomInt(1, lv_rollRoof);
    if ((lv_roll <= 24)) {
        return gf_SetAlienType1();
    }
    else if ((lv_roll <= 40)) {
        return gf_SetAlienType2();
    }
    else if ((lv_roll <= 50)) {
        return gf_SetAlienType4();
    }
    else if ((lv_roll <= 56)) {
        return gf_SetAlienType6();
    }
    else if ((lv_roll <= 58)) {
        return gf_SetAlienType8();
    }
    return gf_SetAlienType24();
}

string gf_SetAlienType1 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 15);

    // Implementation
    if ((lv_roll <= 2)) {
        return "HotSSwarmling";
    }
    else if ((lv_roll <= 5)) {
        return "HotSRaptor";
    }
    return "Zergling";
}

string gf_SetAlienType2 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 15);

    // Implementation
    if ((lv_roll <= 1)) {
        return "Scourge";
    }
    else if ((lv_roll <= 2)) {
        return "HotSHunter";
    }
    else if ((lv_roll <= 3)) {
        return "HotSSplitterlingBig";
    }
    else if ((lv_roll <= 5)) {
        return "Baneling";
    }
    return "Roach";
}

string gf_SetAlienType4 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 9);

    // Implementation
    if ((lv_roll <= 5)) {
        return "Mutalisk";
    }
    return "Hydralisk";
}

string gf_SetAlienType6 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 18);

    // Implementation
    if ((lv_roll <= 3)) {
        return "BroodLord";
    }
    else if ((lv_roll <= 6)) {
        return "InfestedAbomination";
    }
    else if ((lv_roll <= 10)) {
        return "Corruptor";
    }
    else if ((lv_roll <= 14)) {
        return "DevourerMP";
    }
    return "InfestedAbomination";
}

string gf_SetAlienType8 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 15);

    // Implementation
    return "Ultralisk";
}

string gf_SetAlienType24 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 5);

    // Implementation
    if ((lv_roll <= 2)) {
        return "Leviathan";
    }
    return "Brutalisk";
}

int gf_GetAlienWeight (string lp_alienType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_alienType == "Zergling") || (lp_alienType == "HotSRaptor") || (lp_alienType == "HotSSwarmling"))) {
        return 1;
    }
    else if (((lp_alienType == "Roach") || (lp_alienType == "Baneling") || (lp_alienType == "HotSHunter") || (lp_alienType == "HotSSplitterlingBig") || (lp_alienType == "Scourge"))) {
        return 2;
    }
    else if (((lp_alienType == "Hydralisk") || (lp_alienType == "Mutalisk") || (lp_alienType == "InfestedAbomination"))) {
        return 4;
    }
    else if (((lp_alienType == "GuardianMP") || (lp_alienType == "DevourerMP") || (lp_alienType == "Corruptor") || (lp_alienType == "BroodLord"))) {
        return 6;
    }
    else if (((lp_alienType == "Ultralisk"))) {
        return 8;
    }
    else if (((lp_alienType == "Brutalisk") || (lp_alienType == "Leviathan"))) {
        return 12;
    }
    return 1;
}

int gf_GetAlienCount (string lp_alienType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_alienType == "Zergling") || (lp_alienType == "HotSRaptor"))) {
        return 2;
    }
    else if (((lp_alienType == "HotSSwarmling"))) {
        return 3;
    }
    return 1;
}

void gf_CreateSelectableHero (string lp_heroName) {
    // Variable Declarations
    point lv_creationPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_creationPoint = PointFromName(("Selection - " + lp_heroName));
    libNtve_gf_UnitCreateFacingPoint(1, (("CRPG" + lp_heroName + "Level1")), 0, 0, lv_creationPoint, RegionGetCenter(RegionFromId(1)));
    UnitSetHeight(UnitLastCreated(), -2.0, 0.0);
    UnitSetHeight(UnitLastCreated(), UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropHeight), 2.0);
    UnitBehaviorAddPlayer(UnitLastCreated(), "Invulnerable", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terranmedium", 0, 0, lv_creationPoint);
}

void gf_UpdateTooltip (unit lp_affectedUnit, string lp_button, string lp_tooltip) {
    // Variable Declarations
    int lv_damageModifier;
    int lv_damagePoints;

    // Automatic Variable Declarations
    // Variable Initialization

}

point gf_GetOppositePoint (point lp_point, point lp_center) {
    // Automatic Variable Declarations
    // Implementation
    return Point(((2.0 * PointGetX(lp_center)) - PointGetX(lp_point)), ((2.0 * PointGetY(lp_center)) - PointGetY(lp_point)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveWeight;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackWave += 1;
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("Event_Lab02_AlarmIncomingAttack", 0), 8.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/72CDAAA6"));
    Wait(30.0, c_timeGame);
    lv_waveWeight = (40 + (((gv_attackWave * gv_attackWave) * 2) + (PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, 1)) * 20)));
    gf_SpawnAlienLoop(lv_waveWeight, lv_waveWeight);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaves_Init () {
    gt_AttackWaves = TriggerCreate("gt_AttackWaves_Func");
    TriggerAddEventTimePeriodic(gt_AttackWaves, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alien Trickle
//--------------------------------------------------------------------------------------------------
bool gt_AlienTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_alienWeight;
    int lv_trickleWeight;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_attackWave >= 0)) {
        lv_alienWeight = (2 + gv_attackWave);
        lv_trickleWeight = (lv_alienWeight * TruncI(((PlayerGroupCount(gv_survivors) * 0.5) + 1.0)));
        Wait((30 - MinI(gv_attackWave, 15)), c_timeGame);
        gf_SpawnAlienLoop(lv_trickleWeight, lv_alienWeight);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlienTrickle_Init () {
    gt_AlienTrickle = TriggerCreate("gt_AlienTrickle_Func");
    TriggerAddEventMapInit(gt_AlienTrickle);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = UnitGroupClosestToPoint(UnitGroup(null, 0, RegionFromId(1), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    lv_player = UnitGetOwner(EventUnitTargetUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(lv_hero);
    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(lv_hero), c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(1)));
    if ((UnitGetType(lv_hero) == "CRPGAlienLevel1")) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("Rally", 0), UnitGroupClosestToPoint(UnitGroup("CRPGCrashedBattlecruiser", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(1)))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("AlienMetamorphosis", 1)), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), UnitGroupClosestToPoint(UnitGroup("CRPGCrashedBattlecruiser", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(1)))), c_orderQueueReplace);
    }
    UnitSelect(UnitLastCreated(), lv_player, true);
    gv_remainingSelectors -= 1;
    if ((gv_remainingSelectors == 0)) {
        TriggerExecute(gt_FreeHeroes, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelection_Init () {
    gt_HeroSelection = TriggerCreate("gt_HeroSelection_Func");
    TriggerAddEventUnitAbility(gt_HeroSelection, null, AbilityCommand("BeaconGiveHero", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Free Heroes
//--------------------------------------------------------------------------------------------------
bool gt_FreeHeroes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF0649EFE_g;
    int autoF0649EFE_u;
    unit autoF0649EFE_var;
    unitgroup autoC2208D7F_g;
    int autoC2208D7F_u;
    unit autoC2208D7F_var;
    unitgroup auto9196D33C_g;
    int auto9196D33C_u;
    unit auto9196D33C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF0649EFE_g = UnitGroup(null, 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF0649EFE_u = UnitGroupCount(autoF0649EFE_g, c_unitCountAll);
    for (;; autoF0649EFE_u -= 1) {
        autoF0649EFE_var = UnitGroupUnitFromEnd(autoF0649EFE_g, autoF0649EFE_u);
        if (autoF0649EFE_var == null) { break; }
        UnitRemove(autoF0649EFE_var);
    }
    autoC2208D7F_g = UnitGroup("Bunker", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC2208D7F_u = UnitGroupCount(autoC2208D7F_g, c_unitCountAll);
    for (;; autoC2208D7F_u -= 1) {
        autoC2208D7F_var = UnitGroupUnitFromEnd(autoC2208D7F_g, autoC2208D7F_u);
        if (autoC2208D7F_var == null) { break; }
        UnitRemove(autoC2208D7F_var);
    }
    auto9196D33C_g = UnitGroup("SupplyDepot", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9196D33C_u = UnitGroupCount(auto9196D33C_g, c_unitCountAll);
    for (;; auto9196D33C_u -= 1) {
        auto9196D33C_var = UnitGroupUnitFromEnd(auto9196D33C_g, auto9196D33C_u);
        if (auto9196D33C_var == null) { break; }
        UnitIssueOrder(auto9196D33C_var, Order(AbilityCommand("SupplyDepotLower", 0)), c_orderQueueReplace);
    }
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("Dialogue_Transmission5Seconds", 0), 0.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/20A0E835"));
    ObjectiveCreate(StringExternal("Param/Value/9039C785"), StringExternal("Param/Value/1E6C8800"), c_objectiveStateActive, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FreeHeroes_Init () {
    gt_FreeHeroes = TriggerCreate("gt_FreeHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_CreateHeroSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCD62560B_g;
    int autoCD62560B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCD62560B_g = gv_survivors;
    autoCD62560B_var = -1;
    while (true) {
        autoCD62560B_var = PlayerGroupNextPlayer(autoCD62560B_g, autoCD62560B_var);
        if (autoCD62560B_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CRPGCivilian", 0, autoCD62560B_var, PointFromName(("Player " + IntToString(autoCD62560B_var) + " Spawn")));
        UnitSelect(UnitLastCreated(), autoCD62560B_var, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CRPGArmory", c_unitCreateIgnorePlacement, autoCD62560B_var, PointFromId(451313038));
    }
    gf_CreateSelectableHero("Aero");
    gf_CreateSelectableHero("Fighter");
    gf_CreateSelectableHero("Hunter");
    gf_CreateSelectableHero("Infested");
    gf_CreateSelectableHero("Mech");
    gf_CreateSelectableHero("Ship");
    gf_CreateSelectableHero("Sniper");
    gf_CreateSelectableHero("Swarmer");
    gf_CreateSelectableHero("Vehicle");
    gf_CreateSelectableHero("Wizard");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateHeroSelection_Init () {
    gt_CreateHeroSelection = TriggerCreate("gt_CreateHeroSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Turrets
//--------------------------------------------------------------------------------------------------
bool gt_DisableTurrets_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE7836F47_g;
    int autoE7836F47_u;
    unit autoE7836F47_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE7836F47_g = UnitGroup("MissileTurret", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE7836F47_u = UnitGroupCount(autoE7836F47_g, c_unitCountAll);
    for (;; autoE7836F47_u -= 1) {
        autoE7836F47_var = UnitGroupUnitFromEnd(autoE7836F47_g, autoE7836F47_u);
        if (autoE7836F47_var == null) { break; }
        UnitSetPropertyFixed(autoE7836F47_var, c_unitPropLifePercent, 33.0);
    }
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("Dialogue_Transmission5Seconds", 0), 0.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9DE5257F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableTurrets_Init () {
    gt_DisableTurrets = TriggerCreate("gt_DisableTurrets_Func");
    TriggerAddEventTimeElapsed(gt_DisableTurrets, 480.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    const int autoFAB08339_ae = 12;
    const int autoFAB08339_ai = 1;
    int auto194EA66D_catalog;
    int auto194EA66D_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedPlayer = 1;
    for ( ; ( (autoFAB08339_ai >= 0 && lv_pickedPlayer <= autoFAB08339_ae) || (autoFAB08339_ai < 0 && lv_pickedPlayer >= autoFAB08339_ae) ) ; lv_pickedPlayer += autoFAB08339_ai ) {
        if ((PlayerType(lv_pickedPlayer) == c_playerTypeUser)) {
            PlayerGroupAdd(gv_survivors, lv_pickedPlayer);
            gv_remainingSelectors += 1;
            libNtve_gf_SetAlliance(lv_pickedPlayer, gv_alienPlayer, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(lv_pickedPlayer, gv_survivorBasePlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            libNtve_gf_SetAlliance(lv_pickedPlayer, 0, libNtve_ge_AllianceSetting_Neutral);
            auto194EA66D_catalog = c_gameCatalogUnit;
            auto194EA66D_i = 1;
            for ( ; auto194EA66D_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto194EA66D_i += 1 ) {
                lv_unitType = CatalogEntryGet(auto194EA66D_catalog, auto194EA66D_i);
                if (((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ProtossUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ProtossStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/HybridUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranCharacter") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergCharacter"))) {
                    TechTreeUnitHelp(lv_pickedPlayer, lv_unitType, false);
                }

            }
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(gv_survivors, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    AICampaignStart(gv_alienPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_survivors, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_survivors, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Battlecruiser Scene
//--------------------------------------------------------------------------------------------------
bool gt_StartBattlecruiserScene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    unitgroup auto7EC1D1E9_g;
    int auto7EC1D1E9_u;
    unit auto7EC1D1E9_var;
    playergroup auto56A2C87D_g;
    int auto56A2C87D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7EC1D1E9_g = UnitGroup(null, gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7EC1D1E9_u = UnitGroupCount(auto7EC1D1E9_g, c_unitCountAll);
    for (;; auto7EC1D1E9_u -= 1) {
        auto7EC1D1E9_var = UnitGroupUnitFromEnd(auto7EC1D1E9_g, auto7EC1D1E9_u);
        if (auto7EC1D1E9_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto7EC1D1E9_var, false);
    }
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    auto56A2C87D_g = gv_survivors;
    auto56A2C87D_var = -1;
    while (true) {
        auto56A2C87D_var = PlayerGroupNextPlayer(auto56A2C87D_g, auto56A2C87D_var);
        if (auto56A2C87D_var < 0) { break; }
        CameraPan(auto56A2C87D_var, UnitGetPosition(UnitFromId(640316847)), 0.0, -1, 10.0, false);
        CameraPan(auto56A2C87D_var, PointFromId(1236227694), 7.0, -1, 10.0, false);
    }
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("Dialogue_Transmission5Seconds", 0), 0.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/627C2F4B"));
    UnitIssueOrder(UnitFromId(640316847), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1236227694)), c_orderQueueReplace);
    UnitSetHeight(UnitFromId(640316847), -1.0, 6.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBattlecruiserScene_Init () {
    gt_StartBattlecruiserScene = TriggerCreate("gt_StartBattlecruiserScene_Func");
    TriggerAddEventMapInit(gt_StartBattlecruiserScene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Crash
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserCrash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9E0A3EF5_g;
    int auto9E0A3EF5_u;
    unit auto9E0A3EF5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    auto9E0A3EF5_g = UnitGroup(null, gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9E0A3EF5_u = UnitGroupCount(auto9E0A3EF5_g, c_unitCountAll);
    for (;; auto9E0A3EF5_u -= 1) {
        auto9E0A3EF5_var = UnitGroupUnitFromEnd(auto9E0A3EF5_g, auto9E0A3EF5_u);
        if (auto9E0A3EF5_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9E0A3EF5_var, true);
    }
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(1));
    TriggerExecute(gt_CreateHeroSelection, true, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserCrash_Init () {
    gt_BattlecruiserCrash = TriggerCreate("gt_BattlecruiserCrash_Func");
    TriggerAddEventUnitRangePoint(gt_BattlecruiserCrash, UnitRefFromUnit(UnitFromId(640316847)), PointFromId(25930053), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Tooltips
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTooltips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageModifier;
    int lv_levelPoints;
    int lv_upgradePoints;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_levelPoints = (UnitBehaviorCount(UnitGroupUnit(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1), "CRPGLevelCounter") * CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "CRPGLevelCounter", "Modification.AttributeChangeArray[" + IntToString(1) + "].Points", EventPlayer()));
    lv_upgradePoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "CRPGBaseAttributes", "Modification.AttributeChangeArray[" + IntToString(2) + "].Points", EventPlayer());
    lv_damageModifier = (((lv_levelPoints + lv_upgradePoints) * gv_damageFraction) + 1.0);
    CatalogFieldValueSet(c_gameCatalogButton, "AeroLaserArmaments", "Tooltip", EventPlayer(), (("Automatically fire Laser Batteries that deal <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AeroLaserArmamentsDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage to enemies below the hero.")));
    CatalogFieldValueSet(c_gameCatalogButton, "AeroYamatoCannon", "Tooltip", EventPlayer(), (("Blasts a target with a devastating plasma cannon, causing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AeroYamatoCannonDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "HunterPsionicProjection", "Tooltip", EventPlayer(), (("After not attacking for 5 seconds, project a psionic orb that will attack with the unit, dealing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterProjectionBeamDamage", "Amount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterProjectionBeamCreatePersistent", "PeriodCount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Effect,HunterProjectionBeamCreatePersistent,PeriodCount * Effect,HunterProjectionBeamCreatePersistent,PeriodicPeriodArray[0]\"/> second. Can store up to 2.")));
    CatalogFieldValueSet(c_gameCatalogButton, "HunterScarabMine", "Tooltip", EventPlayer(), (("Scarab Mines pursue enemy units that come in range, detonating for <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterScarabMinesDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage and slowing nearby enemies in an area by <d ref=\"100 - (100 * Behavior,HunterSlowScarabMine,Modification.MoveSpeedMultiplier)\"/>% for <d ref=\"Behavior,HunterSlowScarabMine,Duration\"/> seconds.")));
    CatalogFieldValueSet(c_gameCatalogButton, "MechBarrage", "Tooltip", EventPlayer(), (("Stuns all enemies in a small area. Deals <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechBarrageDamage", "Amount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechBarrageCreatePersistent", "PeriodCount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Effect,MechBarrageCreatePersistent,PeriodCount * Effect,MechBarrageCreatePersistent,PeriodicPeriodArray[0]\"/> seconds in a larger area.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "MechShockBlast", "Tooltip", EventPlayer(), (("Unleash a violent burst of energy, stunning and dealing up to <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MechShocking", "PeriodCount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechShockBlastDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage to nearby enemies over <d ref=\"Behavior,MechShocked,Duration\"/> seconds.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperNuclearStrike", "Tooltip", EventPlayer(), (("Calls down a Nuclear Strike at a target location. Nuke takes <d ref=\"Effect,SniperNuclearStrikePersistent,InitialDelay + Effect,SniperNuclearStrikePersistent,ExpireDelay + Effect,SniperNuclearStrikeDetonate,InitialDelay\"/> seconds to land and deals up to <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> (<c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "Amount", EventPlayer()) + CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "AttributeBonus[" + IntToString(7) + "]", EventPlayer()))), c_fixedPrecisionAny) + "</c> vs. Structure) damage to enemies in a large radius.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperSnipe", "Tooltip", EventPlayer(), (("A careful shot, dealing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> (<c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "Amount", EventPlayer()) + CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "AttributeBonus[" + IntToString(5) + "]", EventPlayer()))), c_fixedPrecisionAny) + "</c> vs. Psionic) damage.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c> <c val=\"#ColorAttackInfo\">Can only target biological units.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperToxicMunitions", "Tooltip", EventPlayer(), (("This unit's projectiles are coated in a deadly toxin that deals <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SniperDeadlyToxinDamage", "PeriodCount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperDeadlyToxinDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Behavior,SniperDeadlyToxinDamage,PeriodCount * Behavior,SniperDeadlyToxinDamage,Period\"/> seconds to any enemy damaged by it for the first time.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "WizardPsionicOrb", "Tooltip", EventPlayer(), (("Unleashes a traveling Psionic Orb that slows and deals <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "WizardPsionicOrbDamage", "Amount", EventPlayer()) / libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "WizardPsionicOrb", "Period", c_playerAny))), c_fixedPrecisionAny) + "</c> damage per second and slows all enemies movement along its path by <d ref=\"1 - Behavior,WizardSlowPsionicOrb,Modification.MoveSpeedMultiplier * 100\"/>%.")));
    CatalogFieldValueSet(c_gameCatalogButton, "WizardPsionicStorm", "Tooltip", EventPlayer(), (("Creates a storm of psionic energy that lasts 4 seconds, causing up to <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * ((2.0 + CatalogFieldValueGetAsInt(c_gameCatalogEffect, "WizardPsionicStormCreatePersistent", "PeriodCount", EventPlayer())) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "WizardPsionicStormDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage to all enemy units in the target area.")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTooltips_Init () {
    gt_UpdateTooltips = TriggerCreate("gt_UpdateTooltips_Func");
    TriggerAddEventUnitAbility(gt_UpdateTooltips, null, AbilityCommand("CRPGUpgradeDamage", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitBehaviorChange(gt_UpdateTooltips, null, "CRPGLevelCounter", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Condition
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCondition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto25B3F9EE_g;
    int auto25B3F9EE_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NydusNetwork"))) {
            return false;
        }

        if (!((UnitCount("NydusNetwork", gv_alienPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto25B3F9EE_g = gv_survivors;
    auto25B3F9EE_var = -1;
    while (true) {
        auto25B3F9EE_var = PlayerGroupNextPlayer(auto25B3F9EE_g, auto25B3F9EE_var);
        if (auto25B3F9EE_var < 0) { break; }
        GameOver(auto25B3F9EE_var, c_gameOverVictory, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCondition_Init () {
    gt_VictoryCondition = TriggerCreate("gt_VictoryCondition_Func");
    TriggerAddEventUnitDied(gt_VictoryCondition, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_AttackWaves_Init();
    gt_AlienTrickle_Init();
    gt_HeroSelection_Init();
    gt_FreeHeroes_Init();
    gt_CreateHeroSelection_Init();
    gt_DisableTurrets_Init();
    gt_MapInitialization_Init();
    gt_PlayerLeaves_Init();
    gt_StartBattlecruiserScene_Init();
    gt_BattlecruiserCrash_Init();
    gt_UpdateTooltips_Init();
    gt_VictoryCondition_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
