//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Crash RPG II
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_survivorBasePlayer = 13;
const int gv_alienPlayer = 14;
const fixed gv_damageFraction = 0.0625;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_attackWave;
int gv_remainingSelectors;
playergroup gv_survivors;

void InitGlobals () {
    gv_attackWave = 1;
    gv_survivors = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_CreateRandomAlien (int lp_alienWeight, point lp_spawnPoint, point lp_patrolPoint);
void gf_CreateSelectableHero (string lp_heroName);
void gf_UpdateTooltip (unit lp_affectedUnit, string lp_button, string lp_tooltip);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_AttackWaves;
trigger gt_AlienTrickle;
trigger gt_HeroSelection;
trigger gt_FreeHeroes;
trigger gt_CreateHeroSelection;
trigger gt_DisableTurrets;
trigger gt_MapInitialization;
trigger gt_StartBattlecruiserScene;
trigger gt_BattlecruiserCrash;
trigger gt_MineralReward;
trigger gt_UpdateTooltips;
trigger gt_VictoryCondition;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_CreateRandomAlien (int lp_alienWeight, point lp_spawnPoint, point lp_patrolPoint) {
    int auto4A354644_ae;
    int auto4A354644_ai;

    // Variable Declarations
    int lv_returnValue;
    int lv_rollRoof;
    int lv_roll;
    string lv_spawnedUnit;
    int lv_spawnCount;
    int lv_pickedInteger;

    // Variable Initialization
    lv_spawnCount = 1;

    // Implementation
    if ((lp_alienWeight >= 8)) {
        lv_rollRoof = 27;
    }
    else if ((lp_alienWeight >= 6)) {
        lv_rollRoof = 26;
    }
    else if ((lp_alienWeight >= 4)) {
        lv_rollRoof = 20;
    }
    else if ((lp_alienWeight >= 2)) {
        lv_rollRoof = 12;
    }
    else if ((lp_alienWeight >= 1)) {
        lv_rollRoof = 6;
    }
    lv_roll = RandomInt(1, lv_rollRoof);
    if ((lv_roll <= 6)) {
        lv_spawnedUnit = "Zergling";
        lv_spawnCount = 2;
        lv_returnValue = 1;
    }
    else if ((lv_roll <= 12)) {
        lv_spawnedUnit = "Roach";
        lv_returnValue = 2;
    }
    else if ((lv_roll <= 16)) {
        lv_spawnedUnit = "Hydralisk";
        lv_returnValue = 4;
    }
    else if ((lv_roll <= 20)) {
        lv_spawnedUnit = "Mutalisk";
        lv_returnValue = 4;
    }
    else if ((lv_roll <= 22)) {
        lv_spawnedUnit = "GuardianMP";
        lv_returnValue = 6;
    }
    else if ((lv_roll <= 24)) {
        lv_spawnedUnit = "DevourerMP";
        lv_returnValue = 6;
    }
    else if ((lv_roll <= 26)) {
        lv_spawnedUnit = "Corruptor";
        lv_returnValue = 6;
    }
    else if ((lv_roll <= 27)) {
        lv_spawnedUnit = "Ultralisk";
        lv_returnValue = 8;
    }
    auto4A354644_ae = lv_spawnCount;
    auto4A354644_ai = 1;
    lv_pickedInteger = 1;
    for ( ; ( (auto4A354644_ai >= 0 && lv_pickedInteger <= auto4A354644_ae) || (auto4A354644_ai <= 0 && lv_pickedInteger >= auto4A354644_ae) ) ; lv_pickedInteger += auto4A354644_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_spawnedUnit, 0, gv_alienPlayer, lp_spawnPoint);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), lp_patrolPoint), c_orderQueueReplace);
    }
    SoundPlayOnUnitForPlayer(SoundLink("NydusWorm_Unload", 0), gv_alienPlayer, PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    return lv_returnValue;
}

void gf_CreateSelectableHero (string lp_heroName) {
    // Variable Declarations
    point lv_creationPoint;

    // Variable Initialization

    // Implementation
    lv_creationPoint = PointFromName(("Selection - " + lp_heroName));
    libNtve_gf_UnitCreateFacingPoint(1, (("CRPG" + lp_heroName + "Level1")), 0, 0, lv_creationPoint, RegionGetCenter(RegionFromId(1)));
    UnitSetHeight(UnitLastCreated(), -2.0, 0.0);
    UnitSetHeight(UnitLastCreated(), UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropHeight), 2.0);
    UnitBehaviorAddPlayer(UnitLastCreated(), "Invulnerable", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terranmedium", 0, 0, lv_creationPoint);
}

void gf_UpdateTooltip (unit lp_affectedUnit, string lp_button, string lp_tooltip) {
    // Variable Declarations
    int lv_damageModifier;
    int lv_damagePoints;

    // Variable Initialization

}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveWeight;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("Event_Lab02_AlarmIncomingAttack", 0), 8.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/72CDAAA6"));
    Wait(30.0, c_timeGame);
    lv_waveWeight = (100 + ((gv_attackWave * gv_attackWave) * 2));
    while ((lv_waveWeight > 0)) {
        lv_waveWeight -= gf_CreateRandomAlien(lv_waveWeight, UnitGetPosition(UnitGroupRandomUnit(UnitGroup("NydusNetwork", gv_alienPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), PointFromId(1236227694));
        Wait(0.1, c_timeGame);
    }
    gv_attackWave += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaves_Init () {
    gt_AttackWaves = TriggerCreate("gt_AttackWaves_Func");
    TriggerAddEventTimePeriodic(gt_AttackWaves, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alien Trickle
//--------------------------------------------------------------------------------------------------
bool gt_AlienTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_placeholder;
    unit lv_spawningNydus;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawningNydus = UnitGroupRandomUnit(UnitGroup("NydusCanal", gv_alienPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_placeholder = gf_CreateRandomAlien(4, UnitGetPosition(lv_spawningNydus), RegionRandomPoint(RegionPlayableMap()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlienTrickle_Init () {
    gt_AlienTrickle = TriggerCreate("gt_AlienTrickle_Func");
    TriggerAddEventTimePeriodic(gt_AlienTrickle, 45.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;

    // Variable Initialization
    lv_hero = UnitGroupClosestToPoint(UnitGroup(null, 0, RegionFromId(1), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    lv_player = UnitGetOwner(EventUnitTargetUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(lv_hero);
    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(lv_hero), c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(1)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), UnitGroupClosestToPoint(UnitGroup("CRPGCrashedBattlecruiser", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(1)))), c_orderQueueReplace);
    UnitSelect(UnitLastCreated(), lv_player, true);
    gv_remainingSelectors -= 1;
    if ((gv_remainingSelectors == 0)) {
        TriggerExecute(gt_FreeHeroes, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelection_Init () {
    gt_HeroSelection = TriggerCreate("gt_HeroSelection_Func");
    TriggerAddEventUnitAbility(gt_HeroSelection, null, AbilityCommand("BeaconGiveHero", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Free Heroes
//--------------------------------------------------------------------------------------------------
bool gt_FreeHeroes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SupplyDepot", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("SupplyDepotLower", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("Dialogue_Transmission5Seconds", 0), 0.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/20A0E835"));
    ObjectiveCreate(StringExternal("Param/Value/9039C785"), StringExternal("Param/Value/1E6C8800"), c_objectiveStateActive, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FreeHeroes_Init () {
    gt_FreeHeroes = TriggerCreate("gt_FreeHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_CreateHeroSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_survivors);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CRPGCivilian", 0, PlayerGroupLoopCurrent(), PointFromName(("Player " + IntToString(PlayerGroupLoopCurrent()) + " Spawn")));
        UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CRPGArmory", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointFromId(451313038));
    }
    PlayerGroupLoopEnd();
    gf_CreateSelectableHero("Aero");
    gf_CreateSelectableHero("Fighter");
    gf_CreateSelectableHero("Hunter");
    gf_CreateSelectableHero("Infested");
    gf_CreateSelectableHero("Mech");
    gf_CreateSelectableHero("Ship");
    gf_CreateSelectableHero("Sniper");
    gf_CreateSelectableHero("Vehicle");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateHeroSelection_Init () {
    gt_CreateHeroSelection = TriggerCreate("gt_CreateHeroSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Turrets
//--------------------------------------------------------------------------------------------------
bool gt_DisableTurrets_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("MissileTurret", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 33.0);
    }
    UnitGroupLoopEnd();
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("Dialogue_Transmission5Seconds", 0), 0.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9DE5257F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableTurrets_Init () {
    gt_DisableTurrets = TriggerCreate("gt_DisableTurrets_Func");
    TriggerAddEventTimeElapsed(gt_DisableTurrets, 480.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    int autoFAB08339_ae;
    int autoFAB08339_ai;
    int auto194EA66D_catalog;
    int auto194EA66D_i;

    // Variable Declarations
    string lv_unitType;
    int lv_pickedPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFAB08339_ae = 12;
    autoFAB08339_ai = 1;
    lv_pickedPlayer = 1;
    for ( ; ( (autoFAB08339_ai >= 0 && lv_pickedPlayer <= autoFAB08339_ae) || (autoFAB08339_ai <= 0 && lv_pickedPlayer >= autoFAB08339_ae) ) ; lv_pickedPlayer += autoFAB08339_ai ) {
        if ((PlayerType(lv_pickedPlayer) == c_playerTypeUser)) {
            PlayerGroupAdd(gv_survivors, lv_pickedPlayer);
            gv_remainingSelectors += 1;
            libNtve_gf_SetAlliance(lv_pickedPlayer, gv_alienPlayer, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(lv_pickedPlayer, gv_survivorBasePlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            libNtve_gf_SetAlliance(lv_pickedPlayer, 0, libNtve_ge_AllianceSetting_Neutral);
            auto194EA66D_catalog = c_gameCatalogUnit;
            auto194EA66D_i = 1;
            for ( ; auto194EA66D_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto194EA66D_i += 1 ) {
                lv_unitType = CatalogEntryGet(auto194EA66D_catalog, auto194EA66D_i);
                if (((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ProtossUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ProtossStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/HybridUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranCharacter") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergCharacter"))) {
                    TechTreeUnitHelp(lv_pickedPlayer, lv_unitType, false);
                }

            }
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(gv_survivors, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    AICampaignStart(gv_alienPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Battlecruiser Scene
//--------------------------------------------------------------------------------------------------
bool gt_StartBattlecruiserScene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    int lv_pickedPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    PlayerGroupLoopBegin(gv_survivors);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitFromId(640316847)), 0.0, -1, 10.0, false);
        CameraPan(PlayerGroupLoopCurrent(), PointFromId(1236227694), 7.0, -1, 10.0, false);
    }
    PlayerGroupLoopEnd();
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("Dialogue_Transmission5Seconds", 0), 0.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/627C2F4B"));
    UnitIssueOrder(UnitFromId(640316847), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1236227694)), c_orderQueueReplace);
    UnitSetHeight(UnitFromId(640316847), -1.0, 6.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBattlecruiserScene_Init () {
    gt_StartBattlecruiserScene = TriggerCreate("gt_StartBattlecruiserScene_Func");
    TriggerAddEventMapInit(gt_StartBattlecruiserScene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Crash
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserCrash_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(1));
    TriggerExecute(gt_CreateHeroSelection, true, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserCrash_Init () {
    gt_BattlecruiserCrash = TriggerCreate("gt_BattlecruiserCrash_Func");
    TriggerAddEventUnitRangePoint(gt_BattlecruiserCrash, UnitRefFromUnit(UnitFromId(640316847)), PointFromId(25930053), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Reward
//--------------------------------------------------------------------------------------------------
bool gt_MineralReward_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_survivors, libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(libNtve_gf_KillingPlayer(), c_playerPropMinerals, c_playerPropOperAdd, (UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) / 3.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralReward_Init () {
    gt_MineralReward = TriggerCreate("gt_MineralReward_Func");
    TriggerAddEventUnitDied(gt_MineralReward, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Tooltips
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTooltips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageModifier;
    int lv_levelPoints;
    int lv_upgradePoints;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_levelPoints = (UnitBehaviorCount(UnitGroupUnit(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1), "LevelCounter") * CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "LevelCounter", "Modification.AttributeChangeArray[" + IntToString(1) + "].Points", EventPlayer()));
    lv_upgradePoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "CRPGBaseAttributes", "Modification.AttributeChangeArray[" + IntToString(2) + "].Points", EventPlayer());
    lv_damageModifier = (((lv_levelPoints + lv_upgradePoints) * gv_damageFraction) + 1.0);
    CatalogFieldValueSet(c_gameCatalogButton, "AeroYamatoCannon", "Tooltip", EventPlayer(), (("Blasts a target with a devastating plasma cannon, causing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AeroYamatoCannonDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "AeroLaserArmaments", "Tooltip", EventPlayer(), (("Automatically fire Laser Batteries that deal <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AeroLaserArmamentsDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage to enemies below the hero.")));
    CatalogFieldValueSet(c_gameCatalogButton, "HunterPsionicProjection", "Tooltip", EventPlayer(), (("After not attacking for 5 seconds, project a psionic orb that will attack with the unit, dealing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterProjectionBeamDamage", "Amount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterProjectionBeamCreatePersistent", "PeriodCount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Effect,HunterProjectionBeamCreatePersistent,PeriodCount * Effect,HunterProjectionBeamCreatePersistent,PeriodicPeriodArray[0]\"/> second. Can store up to 2.")));
    CatalogFieldValueSet(c_gameCatalogButton, "HunterScarabMine", "Tooltip", EventPlayer(), (("Scarab Mines pursue enemy units that come in range, detonating for <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterScarabMinesDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage and slowing nearby enemies in an area by <d ref=\"100 - (100 * Behavior,HunterSlowScarabMine,Modification.MoveSpeedMultiplier)\"/>% for <d ref=\"Behavior,HunterSlowScarabMine,Duration\"/> seconds.")));
    CatalogFieldValueSet(c_gameCatalogButton, "HunterScatterCannon", "Tooltip", EventPlayer(), (("Launch a volley of missiles, dealing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (5.0 * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterScatterCannonDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage in an area.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "MechBarrage", "Tooltip", EventPlayer(), (("Stuns all enemies in a small area. Deals <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechBarrageDamage", "Amount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechBarrageCreatePersistent", "PeriodCount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Effect,MechBarrageCreatePersistent,PeriodCount * Effect,MechBarrageCreatePersistent,PeriodicPeriodArray[0]\"/> seconds in a larger area.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "MechShockBlast", "Tooltip", EventPlayer(), (("Unleash a violent burst of energy, stunning and dealing up to <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MechShocking", "PeriodCount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechShockBlastDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage to nearby enemies over <d ref=\"Behavior,MechShocked,Duration\"/> seconds.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperNuclearStrike", "Tooltip", EventPlayer(), (("Calls down a Nuclear Strike at a target location. Nuke takes <d ref=\"Effect,SniperNuclearStrikePersistent,InitialDelay + Effect,SniperNuclearStrikePersistent,ExpireDelay + Effect,SniperNuclearStrikeDetonate,InitialDelay\"/> seconds to land and deals up to <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> (<c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "Amount", EventPlayer()) + CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "AttributeBonus[" + IntToString(7) + "]", EventPlayer()))), c_fixedPrecisionAny) + "</c> vs. Structure) damage to enemies in a large radius.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperSnipe", "Tooltip", EventPlayer(), (("A careful shot, dealing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> (<c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "Amount", EventPlayer()) + CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "AttributeBonus[" + IntToString(5) + "]", EventPlayer()))), c_fixedPrecisionAny) + "</c> vs. Psionic) damage.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c> <c val=\"#ColorAttackInfo\">Can only target biological units.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperToxicMunitions", "Tooltip", EventPlayer(), (("This unit's projectiles are coated in a deadly toxin that deals <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SniperDeadlyToxinDamage", "PeriodCount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperDeadlyToxinDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Behavior,SniperDeadlyToxinDamage,PeriodCount * Behavior,SniperDeadlyToxinDamage,Period\"/> seconds to any enemy damaged by it for the first time.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTooltips_Init () {
    gt_UpdateTooltips = TriggerCreate("gt_UpdateTooltips_Func");
    TriggerAddEventUnitAbility(gt_UpdateTooltips, null, AbilityCommand("CRPGUpgradeDamage", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitBehaviorChange(gt_UpdateTooltips, null, "LevelCounter", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Condition
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCondition_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NydusNetwork"))) {
            return false;
        }

        if (!((UnitCount("NydusNetwork", gv_alienPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_survivors);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCondition_Init () {
    gt_VictoryCondition = TriggerCreate("gt_VictoryCondition_Func");
    TriggerAddEventUnitDied(gt_VictoryCondition, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_AttackWaves_Init();
    gt_AlienTrickle_Init();
    gt_HeroSelection_Init();
    gt_FreeHeroes_Init();
    gt_CreateHeroSelection_Init();
    gt_DisableTurrets_Init();
    gt_MapInitialization_Init();
    gt_StartBattlecruiserScene_Init();
    gt_BattlecruiserCrash_Init();
    gt_MineralReward_Init();
    gt_UpdateTooltips_Init();
    gt_VictoryCondition_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
