//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Crash RPG II
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

//--------------------------------------------------------------------------------------------------
// Library: WeaverFunctions
//--------------------------------------------------------------------------------------------------
// Function Declarations
string libALZL_gf_StringWithLeadingCharacters (string lp_string, string lp_character, int lp_stringLength);
text libALZL_gf_StringToGradientTextAtCharacter (string lp_string, color lp_startColor, color lp_endColor, int lp_characterIndex);
text libALZL_gf_StringToGradientText (string lp_string, color lp_startColor, color lp_endColor);
color libALZL_gf_ColorFromRace (string lp_race);
void libALZL_gf_WaitForTicks (int lp_ticks);
string libALZL_gf_ConvertUnitToPortraitModel (string lp_unit);
string libALZL_gf_ConvertUnitToPortraitImage (string lp_unit);
string libALZL_gf_ConvertUnitToPortraitModelPath (string lp_unit);
string libALZL_gf_ConvertUnitToPortraitImagePath (string lp_unit);

//--------------------------------------------------------------------------------------------------
// Library: WeaverFunctions
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libALZL_InitLibraries () {
    libNtve_InitVariables();
}

// Functions
string libALZL_gf_StringWithLeadingCharacters (string lp_string, string lp_character, int lp_stringLength) {
    // Variable Declarations
    int lv_pickedIndex;
    string lv_returnedString;
    int lv_index;

    // Automatic Variable Declarations
    int auto10C278D1_ae;
    const int auto10C278D1_ai = 1;

    // Variable Initialization
    lv_returnedString = "";

    // Implementation
    if ((StringLength(lp_string) >= lp_stringLength)) {
        return lp_string;
    }

    auto10C278D1_ae = lp_stringLength;
    lv_pickedIndex = 1;
    for ( ; ( (auto10C278D1_ai >= 0 && lv_pickedIndex <= auto10C278D1_ae) || (auto10C278D1_ai < 0 && lv_pickedIndex >= auto10C278D1_ae) ) ; lv_pickedIndex += auto10C278D1_ai ) {
        lv_index = ModI((lv_pickedIndex - 1), StringLength(lp_character));
        lv_index = (StringLength(lp_character) - lv_index);
        lv_returnedString = (StringSub(lp_character, lv_index, lv_index) + lv_returnedString);
    }
    lv_returnedString = StringReplace(lv_returnedString, lp_string, (lp_stringLength - (StringLength(lp_string) - 1)), lp_stringLength);
    return lv_returnedString;
}

text libALZL_gf_StringToGradientTextAtCharacter (string lp_string, color lp_startColor, color lp_endColor, int lp_characterIndex) {
    // Variable Declarations
    int lv_stringLength;
    fixed lv_redIteration;
    fixed lv_greenIteration;
    fixed lv_blueIteration;
    int lv_i;
    text lv_result;

    // Automatic Variable Declarations
    int auto203051B8_ae;
    const int auto203051B8_ai = 1;

    // Variable Initialization
    lv_stringLength = StringLength(lp_string);
    lv_redIteration = ((ColorGetComponent(lp_startColor, c_colorComponentRed) - ColorGetComponent(lp_endColor, c_colorComponentRed)) / lv_stringLength);
    lv_greenIteration = ((ColorGetComponent(lp_startColor, c_colorComponentGreen) - ColorGetComponent(lp_endColor, c_colorComponentGreen)) / lv_stringLength);
    lv_blueIteration = ((ColorGetComponent(lp_startColor, c_colorComponentBlue) - ColorGetComponent(lp_endColor, c_colorComponentBlue)) / lv_stringLength);

    // Implementation
    auto203051B8_ae = MinI(lp_characterIndex, lv_stringLength);
    lv_i = 0;
    for ( ; ( (auto203051B8_ai >= 0 && lv_i <= auto203051B8_ae) || (auto203051B8_ai < 0 && lv_i >= auto203051B8_ae) ) ; lv_i += auto203051B8_ai ) {
        lv_result = (lv_result + TextWithColor(StringToText(StringSub(lp_string, lv_i, lv_i)), Color((ColorGetComponent(lp_startColor, c_colorComponentRed) - (lv_redIteration * lv_i)), (ColorGetComponent(lp_startColor, c_colorComponentGreen) - (lv_greenIteration * lv_i)), (ColorGetComponent(lp_startColor, c_colorComponentBlue) - (lv_blueIteration * lv_i)))));
    }
    if ((lv_stringLength > lp_characterIndex)) {
        lv_result = (lv_result + TextWithColor(StringToText(StringSub(lp_string, (lp_characterIndex + 1), lv_stringLength)), Color(100.00, 100.00, 100.00)));
    }

    return lv_result;
}

text libALZL_gf_StringToGradientText (string lp_string, color lp_startColor, color lp_endColor) {
    // Variable Declarations
    int lv_stringLength;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stringLength = StringLength(lp_string);

    // Implementation
    return libALZL_gf_StringToGradientTextAtCharacter(lp_string, lp_startColor, lp_endColor, lv_stringLength);
}

color libALZL_gf_ColorFromRace (string lp_race) {
    // Automatic Variable Declarations
    string autoA64FC525_val;

    // Implementation
    autoA64FC525_val = lp_race;
    if (autoA64FC525_val == "Prot") {
        return Color(43.14, 66.67, 100.00);
    }
    else if (autoA64FC525_val == "Terr") {
        return Color(60.78, 100.00, 74.51);
    }
    else if (autoA64FC525_val == "Zerg") {
        return Color(96.08, 54.90, 27.45);
    }
    else {
    }
    return Color(100.00, 100.00, 100.00);
}

void libALZL_gf_WaitForTicks (int lp_ticks) {
    // Variable Declarations
    const fixed lv_gAME_TICK = 0.0625;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait((lv_gAME_TICK * lp_ticks), c_timeGame);
}

string libALZL_gf_ConvertUnitToPortraitModel (string lp_unit) {
    // Variable Declarations
    string lv_portraitModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portraitModel = CatalogFieldValueGet(c_gameCatalogActor, (lp_unit), "PortraitModel", 0);

    // Implementation
    return (libALZL_gf_ConvertUnitToPortraitModelPath(lp_unit));
}

string libALZL_gf_ConvertUnitToPortraitImage (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (libALZL_gf_ConvertUnitToPortraitImagePath(lp_unit));
}

string libALZL_gf_ConvertUnitToPortraitModelPath (string lp_unit) {
    // Variable Declarations
    string lv_portraitModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portraitModel = CatalogFieldValueGet(c_gameCatalogActor, (lp_unit), "PortraitModel", c_playerAny);

    // Implementation
    return lv_portraitModel;
}

string libALZL_gf_ConvertUnitToPortraitImagePath (string lp_unit) {
    // Variable Declarations
    string lv_portraitModel;
    string lv_portraitImage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portraitModel = libALZL_gf_ConvertUnitToPortraitModelPath(lp_unit);
    lv_portraitImage = CatalogFieldValueGet(c_gameCatalogModel, lv_portraitModel, "Image", c_playerAny);

    // Implementation
    return lv_portraitImage;
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libALZL_InitLib_completed = false;

void libALZL_InitLib () {
    if (libALZL_InitLib_completed) {
        return;
    }

    libALZL_InitLib_completed = true;

    libALZL_InitLibraries();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libALZL_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_HOSTILE = 15;
const int gv_pLAYER_NEUTRAL = 0;
const int gv_nUMBER_OF_BARRENS_POINTS = 7;
const int gv_nUMBER_OF_BEACH_POINTS = 16;
const int gv_nUMBER_OF_CITY_POINTS = 8;
const int gv_nUMBER_OF_FARMLAND_POINTS = 11;
const int gv_nUMBER_OF_FOREST_POINTS = 21;
const int gv_nUMBER_OF_LAB_POINTS = 3;
const int gv_nUMBER_OF_MAGMA_POINTS = 10;
const int gv_nUMBER_OF_PORT_POINTS = 3;
const int gv_nUMBER_OF_SNOW_POINTS = 24;
const int gv_nUMBER_OF_WETLAND_POINTS = 4;
const int gv_nUMBER_OF_WOODLANDS_POINTS = 9;
const int gv_tOTAL_NUMBER_OF_NYDUS_WORM_POINTS = 116;
const int gv_pLAYER_ALIEN = 14;
const int gv_hERO_COUNT = 14;
const int gv_hERO_AERO = 1;
const int gv_hERO_ALIEN = 2;
const int gv_hERO_FIGHTER = 3;
const int gv_hERO_HUNTER = 4;
const int gv_hERO_INFESTED = 5;
const int gv_hERO_MECH = 6;
const int gv_hERO_MEDIC = 7;
const int gv_hERO_SHIP = 8;
const int gv_hERO_SHOOTER = 9;
const int gv_hERO_SNIPER = 10;
const int gv_hERO_SORCERER = 11;
const int gv_hERO_SWARMER = 12;
const int gv_hERO_VEHICLE = 13;
const int gv_hERO_WIZARD = 14;
const int gv_hERO_DEMON = 0;
const int gv_hERO_DRAGON = 0;
const int gv_hERO_ENGINEER = 0;
const int gv_hERO_JUMPER = 0;
const int gv_hERO_PHASE_SMITH = 0;
const int gv_pLAYER_SURVIVOR_BASE = 13;
const int gv_pLAYER_COUNT = 16;
const int gv_sIDE_MISSION_COUNT = 1;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_HeroDialogItem {
    int lv_button;
    int lv_icon;
    int lv_label;
    bool lv_disabled;
};

struct gs_HeroSelectionDialog {
    int lv_dialog;
    gs_HeroDialogItem[gv_hERO_COUNT + 1] lv_dialogRecord;
};

struct gs_Hero {
    string lv_unitType;
    string lv_attackerType;
    string lv_primaryUpgrade;
    string lv_secondaryUpgrade;
    string lv_ternaryUpgrade;
};

struct gs_Upgrade {
    string lv_icon;
    text lv_title;
    text lv_description;
};

struct gs_HeroRandomDialogButton {
    int[4] lv_dialogItem;
    bool lv_disabled;
};

struct gs_CBDialog {
    int lv_dialog;
    unit lv_targetUnit;
    int lv_name;
    int lv_portrait;
    int lv_life;
    int lv_lifeBar;
    int lv_mineral;
    int lv_mineralBar;
};

struct gs_MineralPoolDialog {
    int lv_dialog;
    int lv_mineralBar;
    int lv_mineralText;
};

struct gs_SideObjective {
    int lv_objective;
    unitgroup lv_unitGroup;
};

struct gs_UniqueEvents {
    int[2] lv_availableUniqueEvents;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_Heroes_Null = 0;
const int ge_Heroes_Aero = 1;
const int ge_Heroes_Alien = 2;
const int ge_Heroes_Demon = 3;
const int ge_Heroes_Dragon = 4;
const int ge_Heroes_Engineer = 5;
const int ge_Heroes_Fighter = 6;
const int ge_Heroes_Hunter = 7;
const int ge_Heroes_Infested = 8;
const int ge_Heroes_Jumper = 9;
const int ge_Heroes_Mech = 10;
const int ge_Heroes_Medic = 11;
const int ge_Heroes_PhaseSmith = 12;
const int ge_Heroes_Ship = 13;
const int ge_Heroes_Shooter = 14;
const int ge_Heroes_Sniper = 15;
const int ge_Heroes_Sorcerer = 16;
const int ge_Heroes_Swarmer = 17;
const int ge_Heroes_Vehicle = 18;
const int ge_Heroes_Wizard = 19;
const int ge_OBJECTIVES_KILL_NESTS = 0;
const int ge_OBJECTIVES_CRASHED_BATTLECRUISER_SURVIVE = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_tutorialOn;
int[gv_pLAYER_COUNT + 1] gv_revives;
int gv_sharedMinerals;
bool gv_gameEnding;
point[gv_nUMBER_OF_BARRENS_POINTS + 1] gv_barrensPoints;
point[gv_nUMBER_OF_FOREST_POINTS + 1] gv_beachPoints;
point[gv_nUMBER_OF_CITY_POINTS + 1] gv_cityPoints;
point[gv_nUMBER_OF_FARMLAND_POINTS + 1] gv_farmlandPoints;
point[gv_nUMBER_OF_FOREST_POINTS + 1] gv_forestPoints;
point[gv_nUMBER_OF_LAB_POINTS + 1] gv_labPoints;
point[gv_nUMBER_OF_MAGMA_POINTS + 1] gv_magmaPoints;
point[gv_nUMBER_OF_PORT_POINTS + 1] gv_portPoints;
point[gv_nUMBER_OF_SNOW_POINTS + 1] gv_snowPoints;
point[gv_nUMBER_OF_WETLAND_POINTS + 1] gv_wetlandPoints;
point[gv_nUMBER_OF_WOODLANDS_POINTS + 1] gv_woodlandsPoints;
point[gv_tOTAL_NUMBER_OF_NYDUS_WORM_POINTS + 1] gv_nydusWormPoints;
fixed gv_mAX_ALIEN_SUPPLY;
int gv_attackWave;
bool[gv_hERO_COUNT + 1] gv_heroSelected;
playergroup gv_survivors;
unit gv_baseCrashedBattlecruiser;
gs_HeroSelectionDialog gv_heroSelectionDialog;
gs_Hero[gv_hERO_COUNT + 1] gv_hero;
gs_HeroRandomDialogButton gv_heroRandomDialogButton;
bool[gv_pLAYER_COUNT + 1][gv_hERO_COUNT + 1] gv_previouslySelectedHero;
int gv_heroSelectionTimerWindow;
timer gv_heroSelectionTimer;
int gv_remainingInitialSelectors2;
int gv_remainingInitialSelectors;
bool[gv_pLAYER_COUNT + 1] gv_playerSelecting;
int[gv_hERO_COUNT + 1] gv_randomHeroGroup;
bool gv_fading;
unit gv_tutorialHero;
gs_CBDialog[gv_pLAYER_COUNT + 1] gv_cBDialog;
gs_MineralPoolDialog[13] gv_mineralPoolDialog;
fixed gv_mineralPool;
bool gv_calculatingMinerals;
gs_SideObjective[gv_sIDE_MISSION_COUNT + 1] gv_sideObjective;
unitgroup gv_nydusWorms;
int gv_sIDEM_NYDUS;
int gv_sIDEM_DROP_POD;
int gv_maxAlienSpawners;
int[10] gv_objectives;
int[2] gv_availableUniqueEvents;

void InitGlobals () {
    int init_i;
    int init_i1;

    gv_mAX_ALIEN_SUPPLY = 600.0;
    gv_survivors = PlayerGroupEmpty();
    gv_baseCrashedBattlecruiser = UnitFromId(1122562454);
    gv_heroSelectionDialog.lv_dialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= gv_hERO_COUNT; init_i1 += 1) {
        gv_heroSelectionDialog.lv_dialogRecord[init_i1].lv_button = c_invalidDialogControlId;
        gv_heroSelectionDialog.lv_dialogRecord[init_i1].lv_icon = c_invalidDialogControlId;
        gv_heroSelectionDialog.lv_dialogRecord[init_i1].lv_label = c_invalidDialogControlId;
        gv_heroSelectionDialog.lv_dialogRecord[init_i1].lv_disabled = true;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_heroRandomDialogButton.lv_dialogItem[init_i1] = c_invalidDialogControlId;
    }
    gv_heroRandomDialogButton.lv_disabled = true;
    gv_heroSelectionTimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= gv_pLAYER_COUNT; init_i += 1) {
        gv_playerSelecting[init_i] = true;
    }
    for (init_i = 0; init_i <= gv_pLAYER_COUNT; init_i += 1) {
        gv_cBDialog[init_i].lv_dialog = c_invalidDialogId;
        gv_cBDialog[init_i].lv_name = c_invalidDialogControlId;
        gv_cBDialog[init_i].lv_portrait = c_invalidDialogControlId;
        gv_cBDialog[init_i].lv_life = c_invalidDialogControlId;
        gv_cBDialog[init_i].lv_lifeBar = c_invalidDialogControlId;
        gv_cBDialog[init_i].lv_mineral = c_invalidDialogControlId;
        gv_cBDialog[init_i].lv_mineralBar = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_mineralPoolDialog[init_i].lv_dialog = c_invalidDialogId;
        gv_mineralPoolDialog[init_i].lv_mineralBar = c_invalidDialogControlId;
        gv_mineralPoolDialog[init_i].lv_mineralText = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_sIDE_MISSION_COUNT; init_i += 1) {
        gv_sideObjective[init_i].lv_objective = c_invalidObjectiveId;
        gv_sideObjective[init_i].lv_unitGroup = UnitGroupEmpty();
    }
    gv_nydusWorms = UnitGroupEmpty();
    gv_sIDEM_NYDUS = 1;
    gv_sIDEM_DROP_POD = 2;
    gv_maxAlienSpawners = TechTreeUnitCount(gv_pLAYER_ALIEN, "NydusNetwork", c_techCountCompleteOnly);
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_objectives[init_i] = c_invalidObjectiveId;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_GetIntegerfromRevivesAttribute (string lp_attributeValue);
void gf_GameOver ();
void gf_SpawnAlienLoop (int lp_totalWeight, int lp_maximumWeight, int lp_minimumWeight);
unit gf_SpawnAlien (string lp_alienType, point lp_spawnPoint);
string gf_SetRandomAlien (int lp_minimumWeight, int lp_maximumWeight);
string gf_SetAlienType1 ();
string gf_SetAlienType2 ();
string gf_SetAlienType3 ();
string gf_SetAlienType4 ();
string gf_SetAlienType6 ();
string gf_SetAlienType15 ();
string gf_SetAlienType24 ();
int gf_GetAlienWeight (string lp_alienType);
int gf_GetAlienCount (string lp_alienType);
int gf_AttackWaveFormula (int lp_playerCount);
text gf_GetRandomInitialComment ();
text gf_GetRandomComment ();
void gf_SendBattlecruiserTransmission (text lp_messageText, playergroup lp_players, fixed lp_duration, bool lp_wait);
void gf_CreateSelectableHero (int lp_heroID, int lp_player);
bool gf_PlayerCanSelectHero (int lp_player, int lp_heroID);
void gf_SelectHero (int lp_heroIndex, int lp_level, int lp_player);
int gf_GetRandomHeroID (int lp_player);
int gf_GetIntegerfromStartingLevelAttribute (string lp_attributeValue);
int gf_GetExperiencefromLevel (int lp_level);
string gf_UnitNamePathFromHeroID (int lp_iD);
string gf_UnitNamePathFromUnitType (string lp_unitType);
void gf_EndCinematic ();
void gf_AddMineralsToPool (fixed lp_amount);
void gf_SideMNydusWorm ();
point gf_GetOppositePoint (point lp_point, point lp_center);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_VariableInitializaiton;
trigger gt_RevealerInitialization;
trigger gt_TestAllHeroes;
trigger gt_TestManySpawns;
trigger gt_AlienInitialization;
trigger gt_AttackWaves;
trigger gt_AttackWaveInitial;
trigger gt_AlienInitialTrickle;
trigger gt_AlienTrickle;
trigger gt_FlankSnowRoaches;
trigger gt_SetupInitialization;
trigger gt_CreateHeroSelection;
trigger gt_HeroSelection;
trigger gt_FreeHeroes;
trigger gt_SelectionTimeout;
trigger gt_SkipCinematic;
trigger gt_StartBattlecruiserScene;
trigger gt_BattlecruiserCrash;
trigger gt_EndCinematic;
trigger gt_TutorialStart;
trigger gt_TutorialChooseHeroBefore;
trigger gt_TutorialChooseHeroAfter;
trigger gt_TutorialMechanicalIntroduction;
trigger gt_CrashedBattlecruiserDialog;
trigger gt_SelectCrashedBattlecruiser;
trigger gt_CrashedBattlecruiserDamaged;
trigger gt_PlayerLeaves;
trigger gt_PlayerDies;
trigger gt_SharedMinerals;
trigger gt_SideMObjectiveInit;
trigger gt_SideMDropPod;
trigger gt_SideMissionLoop;
trigger gt_PlayerLosesCrashedBattlecruiser;
trigger gt_CreateOjbectives;
trigger gt_VictoryCondition;
trigger gt_AllianceTest;
trigger gt_MineralPool;
trigger gt_UnitTag;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_GetIntegerfromRevivesAttribute (string lp_attributeValue) {
    // Variable Declarations
    int lv_pickedLevel;
    int lv_totalXP;

    // Automatic Variable Declarations
    string auto031CA5E6_val;

    // Variable Initialization

    // Implementation
    auto031CA5E6_val = lp_attributeValue;
    if (auto031CA5E6_val == "0002") {
        return 1;
    }
    else if (auto031CA5E6_val == "0003") {
        return 2;
    }
    else if (auto031CA5E6_val == "0004") {
        return 3;
    }
    else if (auto031CA5E6_val == "0005") {
        return 4;
    }
    else if (auto031CA5E6_val == "0006") {
        return 5;
    }
    else if (auto031CA5E6_val == "0007") {
        return -1;
    }
    else {
    }
    return 0;
}

void gf_GameOver () {
    // Automatic Variable Declarations
    const int autoA055D8CD_ae = 12;
    int autoA055D8CD_var;

    // Implementation
    if ((gv_gameEnding == false)) {
        gv_gameEnding = true;
        ObjectiveSetState(gv_objectives[ge_OBJECTIVES_KILL_NESTS], c_objectiveStateFailed);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/5A3530FD")));
        gf_SendBattlecruiserTransmission(StringExternal("Param/Value/157141F4"), PlayerGroupAll(), 5.0, true);
        autoA055D8CD_var = 1;
        for ( ; autoA055D8CD_var <= autoA055D8CD_ae; autoA055D8CD_var += 1 ) {
            if ((PlayerType(autoA055D8CD_var) == c_playerTypeUser)) {
                GameOver(autoA055D8CD_var, c_gameOverDefeat, true, true);
            }

        }
    }

}

trigger auto_gf_SpawnAlienLoop_Trigger = null;
int auto_gf_SpawnAlienLoop_lp_totalWeight;
int auto_gf_SpawnAlienLoop_lp_maximumWeight;
int auto_gf_SpawnAlienLoop_lp_minimumWeight;

void gf_SpawnAlienLoop (int lp_totalWeight, int lp_maximumWeight, int lp_minimumWeight) {
    auto_gf_SpawnAlienLoop_lp_totalWeight = lp_totalWeight;
    auto_gf_SpawnAlienLoop_lp_maximumWeight = lp_maximumWeight;
    auto_gf_SpawnAlienLoop_lp_minimumWeight = lp_minimumWeight;

    if (auto_gf_SpawnAlienLoop_Trigger == null) {
        auto_gf_SpawnAlienLoop_Trigger = TriggerCreate("auto_gf_SpawnAlienLoop_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnAlienLoop_Trigger, false, false);
}

bool auto_gf_SpawnAlienLoop_TriggerFunc (bool testConds, bool runActions) {
    int lp_totalWeight = auto_gf_SpawnAlienLoop_lp_totalWeight;
    int lp_maximumWeight = auto_gf_SpawnAlienLoop_lp_maximumWeight;
    int lp_minimumWeight = auto_gf_SpawnAlienLoop_lp_minimumWeight;

    // Variable Declarations
    int lv_currentAlienWeight;
    unit lv_spawnedUnit;
    string lv_spawnedUnitType;
    point lv_spawnPoint;
    int lv_pickedNumber;

    // Automatic Variable Declarations
    int auto20B14021_ae;
    const int auto20B14021_ai = 1;

    // Variable Initialization
    lv_currentAlienWeight = lp_totalWeight;

    // Implementation
    while ((lv_currentAlienWeight >= 1) && (PlayerGetPropertyFixed(gv_pLAYER_ALIEN, c_playerPropSuppliesUsed) < gv_mAX_ALIEN_SUPPLY)) {
        lv_spawnedUnitType = gf_SetRandomAlien(lp_minimumWeight, MinI(lv_currentAlienWeight, lp_maximumWeight));
        lv_spawnPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroup("CRPGNydusWorm", gv_pLAYER_ALIEN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        auto20B14021_ae = gf_GetAlienCount(lv_spawnedUnitType);
        lv_pickedNumber = 1;
        for ( ; ( (auto20B14021_ai >= 0 && lv_pickedNumber <= auto20B14021_ae) || (auto20B14021_ai < 0 && lv_pickedNumber >= auto20B14021_ae) ) ; lv_pickedNumber += auto20B14021_ai ) {
            lv_spawnedUnit = gf_SpawnAlien(lv_spawnedUnitType, lv_spawnPoint);
            UnitIssueOrder(lv_spawnedUnit, OrderTargetingPoint(AbilityCommand("move", 1), RegionGetCenter(RegionFromId(1))), c_orderQueueReplace);
            UnitIssueOrder(lv_spawnedUnit, OrderTargetingPoint(AbilityCommand("move", 1), Point(((PointGetX(RegionGetCenter(RegionFromId(1))) * 2.0) - PointGetX(UnitGetPosition(lv_spawnedUnit))), ((PointGetY(RegionGetCenter(RegionFromId(1))) * 2.0) - PointGetY(UnitGetPosition(lv_spawnedUnit))))), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_spawnedUnit, OrderTargetingPoint(AbilityCommand("move", 1), RegionGetCenter(RegionFromId(1))), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_spawnedUnit, OrderTargetingPoint(AbilityCommand("move", 1), UnitGetPosition(lv_spawnedUnit)), c_orderQueueAddToEnd);
        }
        lv_currentAlienWeight -= gf_GetAlienWeight(lv_spawnedUnitType);
        libALZL_gf_WaitForTicks(1);
    }
    return true;
}

unit gf_SpawnAlien (string lp_alienType, point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_alienType, 0, gv_pLAYER_ALIEN, lp_spawnPoint);
    SoundPlayOnUnitForPlayer(SoundLink("NydusWorm_Unload", 0), gv_pLAYER_ALIEN, PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    return UnitLastCreated();
}

string gf_SetRandomAlien (int lp_minimumWeight, int lp_maximumWeight) {
    // Variable Declarations
    int lv_roll;
    int lv_rollRoof;
    string lv_spawnedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnedUnit = "Zergling";

    // Implementation
    if ((lp_maximumWeight >= 24)) {
        lv_rollRoof = 100;
    }
    else if ((lp_maximumWeight >= 15)) {
        lv_rollRoof = 98;
    }
    else if ((lp_maximumWeight >= 6)) {
        lv_rollRoof = 95;
    }
    else if ((lp_maximumWeight >= 4)) {
        lv_rollRoof = 88;
    }
    else if ((lp_maximumWeight >= 3)) {
        lv_rollRoof = 78;
    }
    else if ((lp_maximumWeight >= 2)) {
        lv_rollRoof = 64;
    }
    else if (true) {
        return gf_SetAlienType1();
    }
    lv_roll = RandomInt(lp_minimumWeight, lv_rollRoof);
    if ((lv_roll > 98)) {
        return gf_SetAlienType24();
    }
    else if ((lv_roll > 95)) {
        return gf_SetAlienType15();
    }
    else if ((lv_roll > 88)) {
        return gf_SetAlienType6();
    }
    else if ((lv_roll > 78)) {
        return gf_SetAlienType4();
    }
    else if ((lv_roll > 64)) {
        return gf_SetAlienType3();
    }
    else if ((lv_roll > 42)) {
        return gf_SetAlienType2();
    }
    return gf_SetAlienType1();
}

string gf_SetAlienType1 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 3);

    // Implementation
    if ((lv_roll == 1)) {
        return "HotSSwarmling";
    }
    else if ((lv_roll == 2)) {
        return "HotSRaptor";
    }
    return "Zergling";
}

string gf_SetAlienType2 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 100);

    // Implementation
    if ((lv_roll <= 30)) {
        return "Mutalisk";
    }
    else if ((lv_roll <= 65)) {
        return "Roach";
    }
    return "Hydralisk";
}

string gf_SetAlienType3 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 100);

    // Implementation
    if ((lv_roll <= 22)) {
        return "GuardianMP";
    }
    else if ((lv_roll <= 46)) {
        return "Corruptor";
    }
    else if ((lv_roll <= 73)) {
        lv_roll = RandomInt(1, 3);
        if ((lv_roll == 1)) {
            return "HotSSplitterlingBig";
        }
        else if ((lv_roll == 2)) {
            return "HotSHunter";
        }
        return "Baneling";
    }
    return "Scourge";
}

string gf_SetAlienType4 () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 100);

    // Implementation
    if ((lv_roll <= 32)) {
        return "BroodLord";
    }
    else if ((lv_roll <= 65)) {
        return "DevourerMP";
    }
    return "InfestedAbomination";
}

string gf_SetAlienType6 () {
    // Automatic Variable Declarations
    // Implementation
    return "Ultralisk";
}

string gf_SetAlienType15 () {
    // Automatic Variable Declarations
    // Implementation
    return "Brutalisk";
}

string gf_SetAlienType24 () {
    // Automatic Variable Declarations
    // Implementation
    return "Leviathan";
}

int gf_GetAlienWeight (string lp_alienType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_alienType == "Zergling") || (lp_alienType == "HotSRaptor") || (lp_alienType == "HotSSwarmling"))) {
        return 1;
    }
    else if (((lp_alienType == "Hydralisk") || (lp_alienType == "Mutalisk") || (lp_alienType == "Roach"))) {
        return 2;
    }
    else if (((lp_alienType == "Baneling") || (lp_alienType == "HotSHunter") || (lp_alienType == "HotSSplitterlingBig") || (lp_alienType == "Scourge") || (lp_alienType == "Corruptor") || (lp_alienType == "GuardianMP"))) {
        return 3;
    }
    else if (((lp_alienType == "DevourerMP") || (lp_alienType == "BroodLord") || (lp_alienType == "InfestedAbomination"))) {
        return 4;
    }
    else if (((lp_alienType == "Ultralisk"))) {
        return 6;
    }
    else if (((lp_alienType == "Leviathan"))) {
        return 15;
    }
    else if (((lp_alienType == "Brutalisk"))) {
        return 24;
    }
    return 1;
}

int gf_GetAlienCount (string lp_alienType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_alienType == "Zergling") || (lp_alienType == "HotSRaptor"))) {
        return 2;
    }
    else if (((lp_alienType == "HotSSwarmling"))) {
        return 3;
    }
    return 1;
}

int gf_AttackWaveFormula (int lp_playerCount) {
    // Automatic Variable Declarations
    // Implementation
    return (30 + (lp_playerCount * (8 + ((gv_attackWave - 1) * 4))));
}

text gf_GetRandomInitialComment () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 3);

    // Implementation
    if ((lv_roll == 1)) {
        return StringExternal("Param/Value/84F8E6AC");
    }
    else if ((lv_roll == 2)) {
        return StringExternal("Param/Value/31D50281");
    }
    else if ((lv_roll == 2)) {
        return StringExternal("Param/Value/D6D09110");
    }
    return StringExternal("Param/Value/D540622B");
}

text gf_GetRandomComment () {
    // Variable Declarations
    int lv_roll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_roll = RandomInt(1, 6);

    // Implementation
    if ((lv_roll == 1)) {
        return StringExternal("Param/Value/32818CA1");
    }
    else if ((lv_roll == 2)) {
        return StringExternal("Param/Value/A9C2F644");
    }
    else if ((lv_roll == 3)) {
        return StringExternal("Param/Value/28FBA8DD");
    }
    else if ((lv_roll == 4)) {
        return StringExternal("Param/Value/9A9DC6A0");
    }
    else if ((lv_roll == 5)) {
        return StringExternal("Param/Value/D477359E");
    }
    return StringExternal("Param/Value/3BDDDD16");
}

void gf_SendBattlecruiserTransmission (text lp_messageText, playergroup lp_players, fixed lp_duration, bool lp_wait) {
    // Automatic Variable Declarations
    playergroup auto5C273548_g;
    int auto5C273548_var;
    unitgroup auto20B552E2_g;
    int auto20B552E2_u;
    unit auto20B552E2_var;

    // Implementation
    auto5C273548_g = lp_players;
    auto5C273548_var = -1;
    while (true) {
        auto5C273548_var = PlayerGroupNextPlayer(auto5C273548_g, auto5C273548_var);
        if (auto5C273548_var < 0) { break; }
        auto20B552E2_g = UnitGroup("CRPGCrashedBattlecruiser", auto5C273548_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        auto20B552E2_u = UnitGroupCount(auto20B552E2_g, c_unitCountAll);
        for (;; auto20B552E2_u -= 1) {
            auto20B552E2_var = UnitGroupUnitFromEnd(auto20B552E2_g, auto20B552E2_u);
            if (auto20B552E2_var == null) { break; }
            UnitFlashSelection(auto20B552E2_var, 1.5);
        }
    }
    TransmissionSendForPlayerSelect(lp_players, TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Dialogue_Transmission5Seconds", 0), StringExternal("Param/Value/B324ED35"), lp_messageText, (lp_duration - 5.0), c_transmissionDurationAdd, lp_wait, c_maxPlayers, false);
}

void gf_CreateSelectableHero (int lp_heroID, int lp_player) {
    // Variable Declarations
    fixed lv_creationAngle;
    point lv_creationPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creationAngle = ((360.0 / gv_hERO_COUNT) * lp_heroID);
    lv_creationPoint = PointWithOffsetPolar(PointFromId(1236227694), 6.0, lv_creationAngle);

    // Implementation
    UnitCreate(1, gv_hero[lp_heroID].lv_unitType, 0, lp_player, lv_creationPoint, lv_creationAngle);
}

bool gf_PlayerCanSelectHero (int lp_player, int lp_heroID) {
    // Automatic Variable Declarations
    // Implementation
    if ((((gv_heroSelectionDialog.lv_dialogRecord[lp_heroID].lv_disabled == false) && (GameAttributeGameValue("6") != "0003") && (gv_previouslySelectedHero[lp_player][lp_heroID] == false)) || ((gv_previouslySelectedHero[lp_player][lp_heroID] == true) && (GameAttributeGameValue("6") != "0001")))) {
        return true;
    }

    return false;
}

void gf_SelectHero (int lp_heroIndex, int lp_level, int lp_player) {
    // Variable Declarations
    int lv_pickedHero;
    int lv_pickedLevel;
    fixed lv_spawnOffset;
    int lv_selectedHero;

    // Automatic Variable Declarations
    const int auto11B47089_ae = gv_hERO_COUNT;
    const int auto11B47089_ai = 1;
    const int autoE9976DEE_ae = gv_hERO_COUNT;
    const int autoE9976DEE_ai = 1;

    // Variable Initialization
    lv_selectedHero = lp_heroIndex;

    // Implementation
    if ((GameAttributeGameValue("5") == "0001")) {
        gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_disabled = true;
        libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_button, true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_icon, true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_label, true, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_button, false, PlayerGroupAll());
        if ((GameAttributeGameValue("6") != "0001")) {
            if ((GameAttributeGameValue("6") == "0003")) {
                lv_pickedHero = 1;
                for ( ; ( (auto11B47089_ai >= 0 && lv_pickedHero <= auto11B47089_ae) || (auto11B47089_ai < 0 && lv_pickedHero >= auto11B47089_ae) ) ; lv_pickedHero += auto11B47089_ai ) {
                    libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_button, true, PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_icon, true, PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_label, true, PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemAcceptMouse(gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_button, false, PlayerGroupSingle(lp_player));
                }
            }

            if ((GameAttributeGameValue("6") == "0004")) {
                lv_pickedHero = 1;
                for ( ; ( (autoE9976DEE_ai >= 0 && lv_pickedHero <= autoE9976DEE_ae) || (autoE9976DEE_ai < 0 && lv_pickedHero >= autoE9976DEE_ae) ) ; lv_pickedHero += autoE9976DEE_ai ) {
                    if ((gv_previouslySelectedHero[lp_player][lv_pickedHero] == true)) {
                        libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_button, true, PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_icon, true, PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_label, true, PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemAcceptMouse(gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_button, false, PlayerGroupSingle(lp_player));
                    }

                }
            }

            libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_button, false, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_icon, false, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemDesaturated(gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_label, false, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemAcceptMouse(gv_heroSelectionDialog.lv_dialogRecord[lv_selectedHero].lv_button, true, PlayerGroupSingle(lp_player));
        }

    }

    gv_remainingInitialSelectors -= 1;
    gv_previouslySelectedHero[lp_player][lv_selectedHero] = true;
    lv_spawnOffset = (((360.0 / PlayerGroupCount(gv_survivors)) * PlayerGroupPlayer(gv_survivors, lp_player)) - 90.0);
    UnitCreate(1, gv_hero[lv_selectedHero].lv_unitType, 0, lp_player, PointWithOffsetPolar(PointFromId(1236227694), 1.0, lv_spawnOffset), lv_spawnOffset);
    UnitSelect(UnitLastCreated(), lp_player, true);
    CameraPan(lp_player, UnitGetPosition(UnitLastCreated()), 0.0, -1, 10.0, false);
    DialogSetVisible(gv_heroSelectionDialog.lv_dialog, PlayerGroupSingle(lp_player), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/92954EE2") + StringExternal(gf_UnitNamePathFromHeroID(lv_selectedHero))));
    if ((gv_tutorialOn == true)) {
        gv_tutorialHero = UnitLastCreated();
    }

}

int gf_GetRandomHeroID (int lp_player) {
    // Variable Declarations
    int lv_pickedHero;
    int[gv_hERO_COUNT + 1] lv_availableHeroes;
    string lv_unitType;

    // Automatic Variable Declarations
    const int auto7B7AA7EF_ae = gv_hERO_COUNT;
    const int auto7B7AA7EF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_pickedHero = 1;
    for ( ; ( (auto7B7AA7EF_ai >= 0 && lv_pickedHero <= auto7B7AA7EF_ae) || (auto7B7AA7EF_ai < 0 && lv_pickedHero >= auto7B7AA7EF_ae) ) ; lv_pickedHero += auto7B7AA7EF_ai ) {
        if ((gf_PlayerCanSelectHero(lp_player, lv_pickedHero) == true)) {
            lv_availableHeroes[0] += 1;
            lv_availableHeroes[lv_availableHeroes[0]] = lv_pickedHero;
        }

    }
    if ((lv_availableHeroes[0] > 0)) {
        return lv_availableHeroes[RandomInt(1, lv_availableHeroes[0])];
    }

    return 0;
}

int gf_GetIntegerfromStartingLevelAttribute (string lp_attributeValue) {
    // Automatic Variable Declarations
    string auto50A96332_val;

    // Implementation
    auto50A96332_val = lp_attributeValue;
    if (auto50A96332_val == "0001") {
        return 1;
    }
    else if (auto50A96332_val == "0002") {
        return 2;
    }
    else if (auto50A96332_val == "0003") {
        return 3;
    }
    else if (auto50A96332_val == "0004") {
        return 4;
    }
    else if (auto50A96332_val == "0005") {
        return 5;
    }
    else {
    }
    return 1;
}

int gf_GetExperiencefromLevel (int lp_level) {
    // Variable Declarations
    int lv_pickedLevel;
    int lv_totalXP;

    // Automatic Variable Declarations
    int autoBCF742E4_ae;
    const int autoBCF742E4_ai = 1;

    // Variable Initialization

    // Implementation
    autoBCF742E4_ae = lp_level;
    lv_pickedLevel = 1;
    for ( ; ( (autoBCF742E4_ai >= 0 && lv_pickedLevel <= autoBCF742E4_ae) || (autoBCF742E4_ai < 0 && lv_pickedLevel >= autoBCF742E4_ae) ) ; lv_pickedLevel += autoBCF742E4_ai ) {
        lv_totalXP += CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "CRPGHeroVeterancy", "VeterancyLevelArray[" + IntToString(lv_pickedLevel) + "].MinVeterancyXP", c_playerAny);
    }
    return lv_totalXP;
}

string gf_UnitNamePathFromHeroID (int lp_iD) {
    // Automatic Variable Declarations
    // Implementation
    return gf_UnitNamePathFromUnitType(gv_hero[lp_iD].lv_unitType);
}

string gf_UnitNamePathFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Name", c_playerAny);
}

void gf_EndCinematic () {
    // Automatic Variable Declarations
    playergroup autoE250C467_g;
    int autoE250C467_var;
    unitgroup autoDB5CFB3C_g;
    int autoDB5CFB3C_u;
    unit autoDB5CFB3C_var;
    playergroup auto046EA475_g;
    int auto046EA475_var;

    // Implementation
    if ((gv_fading == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }

    TechTreeAbilityAllow(gv_pLAYER_SURVIVOR_BASE, AbilityCommand("DefensiveTurretHellstormMissilePods", 0), true);
    autoE250C467_g = gv_survivors;
    autoE250C467_var = -1;
    while (true) {
        autoE250C467_var = PlayerGroupNextPlayer(autoE250C467_g, autoE250C467_var);
        if (autoE250C467_var < 0) { break; }
        DialogSetVisible(gv_cBDialog[0].lv_dialog, PlayerGroupSingle(autoE250C467_var), true);
    }
    autoDB5CFB3C_g = UnitGroup("CRPGCrashedBattlecruiser", gv_pLAYER_SURVIVOR_BASE, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoDB5CFB3C_u = UnitGroupCount(autoDB5CFB3C_g, c_unitCountAll);
    for (;; autoDB5CFB3C_u -= 1) {
        autoDB5CFB3C_var = UnitGroupUnitFromEnd(autoDB5CFB3C_g, autoDB5CFB3C_u);
        if (autoDB5CFB3C_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoDB5CFB3C_var, true);
    }
    auto046EA475_g = gv_survivors;
    auto046EA475_var = -1;
    while (true) {
        auto046EA475_var = PlayerGroupNextPlayer(auto046EA475_g, auto046EA475_var);
        if (auto046EA475_var < 0) { break; }
        DialogSetVisible(gv_mineralPoolDialog[auto046EA475_var].lv_dialog, PlayerGroupSingle(auto046EA475_var), true);
    }
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(1));
    TriggerExecute(gt_CreateHeroSelection, true, false);
    if ((gv_tutorialOn == false)) {
        TimerStart(TimerCreate(), 60.0, false, c_timeGame);
        gv_heroSelectionTimer = TimerLastStarted();
        TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/C604D076"), true, false);
        gv_heroSelectionTimerWindow = TimerWindowLastCreated();
        TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
        TimerWindowShowBorder(TimerWindowLastCreated(), true);
        TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleHorizontalTitleTime, false);
        TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
    }

    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_SendBattlecruiserTransmission(StringExternal("Param/Value/264D24E9"), PlayerGroupAll(), 5.0, true);
    gf_SendBattlecruiserTransmission(StringExternal("Param/Value/604C7656"), PlayerGroupAll(), 5.0, true);
    if ((gv_tutorialOn == true)) {
        TriggerExecute(gt_TutorialStart, true, false);
    }

}

void gf_AddMineralsToPool (fixed lp_amount) {
    // Variable Declarations
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup autoD34D6CC5_g;

    // Variable Initialization

    // Implementation
    gv_mineralPool += lp_amount;
    if ((gv_mineralPool >= (PlayerGroupCount(gv_survivors) * 100))) {
        gv_calculatingMinerals = true;
        while ((gv_mineralPool >= (PlayerGroupCount(gv_survivors) * 100))) {
            SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, gv_survivors, 100.0, 0.0);
            autoD34D6CC5_g = gv_survivors;
            lv_pickedPlayer = -1;
            while (true) {
                lv_pickedPlayer = PlayerGroupNextPlayer(autoD34D6CC5_g, lv_pickedPlayer);
                if (lv_pickedPlayer < 0) { break; }
                gv_mineralPool -= 100.0;
                PlayerModifyPropertyInt(lv_pickedPlayer, c_playerPropMinerals, c_playerPropOperAdd, 100);
            }
            libNtve_gf_SetDialogItemDesaturated(gv_cBDialog[0].lv_mineralBar, true, gv_survivors);
            Wait(0.125, c_timeGame);
            libNtve_gf_SetDialogItemDesaturated(gv_cBDialog[0].lv_mineralBar, false, gv_survivors);
            Wait(0.125, c_timeGame);
        }
        libNtve_gf_SetDialogItemDesaturated(gv_cBDialog[0].lv_mineralBar, true, gv_survivors);
        Wait(0.125, c_timeGame);
        libNtve_gf_SetDialogItemDesaturated(gv_cBDialog[0].lv_mineralBar, false, gv_survivors);
        gv_calculatingMinerals = false;
    }

    DialogControlSetSize(gv_cBDialog[0].lv_mineralBar, PlayerGroupAll(), MinI(MaxI(CeilingI(((gv_mineralPool / (PlayerGroupCount(gv_survivors) * 100.0)) * 176.0)), 1), 176), 20);
    libNtve_gf_SetDialogItemText(gv_cBDialog[0].lv_mineral, (StringExternal("Param/Value/2B03C305") + FixedToTextAdvanced((gv_mineralPool / PlayerGroupCount(gv_survivors)), c_formatNumberStyleNormal, true, 1, 1) + StringExternal("Param/Value/19FF0366")), PlayerGroupAll());
}

void gf_SideMNydusWorm () {
    // Variable Declarations
    point lv_nydusPoint;
    int lv_remainingWorms;
    int lv_attemptsRemaining;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attemptsRemaining = 20;

    // Implementation
    while (((RegionContainsPoint(RegionFromId(1), lv_nydusPoint) == true) || (RegionContainsPoint(RegionFromId(2), lv_nydusPoint) == true) || (RegionContainsPoint(RegionFromId(4), lv_nydusPoint) == true) || (RegionContainsPoint(RegionFromId(5), lv_nydusPoint) == true) || (RegionContainsPoint(RegionFromId(3), lv_nydusPoint) == true))) {
        if ((lv_attemptsRemaining == 0)) {
            return ;
        }

        lv_nydusPoint = UnitTypePlacementFromPoint("NydusCanal", gv_pLAYER_ALIEN, RegionRandomPoint(RegionCircle(PointFromId(1236227694), (4 + (4 * (TruncI(GameGetMissionTime()) / 60))))), 3.0);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_ALIEN, lv_nydusPoint);
    UnitGroupAdd(gv_sideObjective[gv_sIDEM_NYDUS].lv_unitGroup, UnitLastCreated());
    if ((ObjectiveGetState(gv_sideObjective[gv_sIDEM_NYDUS].lv_objective) != c_objectiveStateActive)) {
        ObjectiveSetState(gv_sideObjective[gv_sIDEM_NYDUS].lv_objective, c_objectiveStateActive);
        ObjectiveSetLast(gv_sideObjective[gv_sIDEM_NYDUS].lv_objective);
    }

    if ((UnitGroupCount(gv_sideObjective[gv_sIDEM_NYDUS].lv_unitGroup, c_unitCountAlive) == 1)) {
        ObjectiveSetName(gv_sideObjective[gv_sIDEM_NYDUS].lv_objective, (StringExternal("Param/Value/2AC80842") + IntToText(lv_remainingWorms) + StringExternal("Param/Value/7F2E0F9A")));
    }
    else {
        ObjectiveSetName(gv_sideObjective[gv_sIDEM_NYDUS].lv_objective, (StringExternal("Param/Value/71F444A3") + IntToText(lv_remainingWorms) + StringExternal("Param/Value/250BE849")));
    }
}

point gf_GetOppositePoint (point lp_point, point lp_center) {
    // Automatic Variable Declarations
    // Implementation
    return Point(((2.0 * PointGetX(lp_center)) - PointGetX(lp_point)), ((2.0 * PointGetY(lp_center)) - PointGetY(lp_point)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Variable Initializaiton
//--------------------------------------------------------------------------------------------------
bool gt_VariableInitializaiton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentMax;
    int lv_variableOffset;
    int lv_pickedInteger;

    // Automatic Variable Declarations
    int autoBB0541B6_ae;
    const int autoBB0541B6_ai = 1;
    int auto53064341_ae;
    const int auto53064341_ai = 1;
    int autoBAE42110_ae;
    const int autoBAE42110_ai = 1;
    int auto5948470F_ae;
    const int auto5948470F_ai = 1;
    int auto808503E0_ae;
    const int auto808503E0_ai = 1;
    int autoD31065F9_ae;
    const int autoD31065F9_ai = 1;
    int auto968C2AB5_ae;
    const int auto968C2AB5_ai = 1;
    int autoD1998640_ae;
    const int autoD1998640_ai = 1;
    int auto16C16412_ae;
    const int auto16C16412_ai = 1;
    int autoAB131252_ae;
    const int autoAB131252_ai = 1;
    int autoFCE13200_ae;
    const int autoFCE13200_ai = 1;

    // Variable Initialization
    lv_currentMax = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMax = gv_nUMBER_OF_BARRENS_POINTS;
    autoBB0541B6_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (autoBB0541B6_ai >= 0 && lv_pickedInteger <= autoBB0541B6_ae) || (autoBB0541B6_ai < 0 && lv_pickedInteger >= autoBB0541B6_ae) ) ; lv_pickedInteger += autoBB0541B6_ai ) {
        gv_barrensPoints[lv_pickedInteger] = PointFromName(("Barrens-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Barrens-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_BEACH_POINTS;
    auto53064341_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (auto53064341_ai >= 0 && lv_pickedInteger <= auto53064341_ae) || (auto53064341_ai < 0 && lv_pickedInteger >= auto53064341_ae) ) ; lv_pickedInteger += auto53064341_ai ) {
        gv_beachPoints[lv_pickedInteger] = PointFromName(("Beach-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Beach-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_CITY_POINTS;
    autoBAE42110_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (autoBAE42110_ai >= 0 && lv_pickedInteger <= autoBAE42110_ae) || (autoBAE42110_ai < 0 && lv_pickedInteger >= autoBAE42110_ae) ) ; lv_pickedInteger += autoBAE42110_ai ) {
        gv_cityPoints[lv_pickedInteger] = PointFromName(("City-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("City-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_FARMLAND_POINTS;
    auto5948470F_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (auto5948470F_ai >= 0 && lv_pickedInteger <= auto5948470F_ae) || (auto5948470F_ai < 0 && lv_pickedInteger >= auto5948470F_ae) ) ; lv_pickedInteger += auto5948470F_ai ) {
        gv_farmlandPoints[lv_pickedInteger] = PointFromName(("Farmland-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Farmland-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_FOREST_POINTS;
    auto808503E0_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (auto808503E0_ai >= 0 && lv_pickedInteger <= auto808503E0_ae) || (auto808503E0_ai < 0 && lv_pickedInteger >= auto808503E0_ae) ) ; lv_pickedInteger += auto808503E0_ai ) {
        gv_forestPoints[lv_pickedInteger] = PointFromName(("Forest-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Forest-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_LAB_POINTS;
    autoD31065F9_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (autoD31065F9_ai >= 0 && lv_pickedInteger <= autoD31065F9_ae) || (autoD31065F9_ai < 0 && lv_pickedInteger >= autoD31065F9_ae) ) ; lv_pickedInteger += autoD31065F9_ai ) {
        gv_labPoints[lv_pickedInteger] = PointFromName(("Lab-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Lab-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_MAGMA_POINTS;
    auto968C2AB5_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (auto968C2AB5_ai >= 0 && lv_pickedInteger <= auto968C2AB5_ae) || (auto968C2AB5_ai < 0 && lv_pickedInteger >= auto968C2AB5_ae) ) ; lv_pickedInteger += auto968C2AB5_ai ) {
        gv_magmaPoints[lv_pickedInteger] = PointFromName(("Magma-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Magma-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_PORT_POINTS;
    autoD1998640_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (autoD1998640_ai >= 0 && lv_pickedInteger <= autoD1998640_ae) || (autoD1998640_ai < 0 && lv_pickedInteger >= autoD1998640_ae) ) ; lv_pickedInteger += autoD1998640_ai ) {
        gv_portPoints[lv_pickedInteger] = PointFromName(("Port-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Port-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_SNOW_POINTS;
    auto16C16412_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (auto16C16412_ai >= 0 && lv_pickedInteger <= auto16C16412_ae) || (auto16C16412_ai < 0 && lv_pickedInteger >= auto16C16412_ae) ) ; lv_pickedInteger += auto16C16412_ai ) {
        gv_snowPoints[lv_pickedInteger] = PointFromName(("Snow-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Snow-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_WETLAND_POINTS;
    autoAB131252_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (autoAB131252_ai >= 0 && lv_pickedInteger <= autoAB131252_ae) || (autoAB131252_ai < 0 && lv_pickedInteger >= autoAB131252_ae) ) ; lv_pickedInteger += autoAB131252_ai ) {
        gv_wetlandPoints[lv_pickedInteger] = PointFromName(("Wetland-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Wetland-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }
    lv_variableOffset += lv_currentMax;
    lv_currentMax = gv_nUMBER_OF_WOODLANDS_POINTS;
    autoFCE13200_ae = lv_currentMax;
    lv_pickedInteger = 1;
    for ( ; ( (autoFCE13200_ai >= 0 && lv_pickedInteger <= autoFCE13200_ae) || (autoFCE13200_ai < 0 && lv_pickedInteger >= autoFCE13200_ae) ) ; lv_pickedInteger += autoFCE13200_ai ) {
        gv_woodlandsPoints[lv_pickedInteger] = PointFromName(("Woodlands-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
        gv_nydusWormPoints[(lv_variableOffset + lv_pickedInteger)] = PointFromName(("Woodlands-" + libALZL_gf_StringWithLeadingCharacters(IntToString(lv_pickedInteger), "0", 3)));
    }

    gv_hero[gv_hERO_AERO].lv_unitType = "CRPGAero";
    gv_hero[gv_hERO_FIGHTER].lv_unitType = "CRPGFighter";
    gv_hero[gv_hERO_HUNTER].lv_unitType = "CRPGHunter";
    gv_hero[gv_hERO_INFESTED].lv_unitType = "CRPGInfested";
    gv_hero[gv_hERO_MECH].lv_unitType = "CRPGMech";
    gv_hero[gv_hERO_MEDIC].lv_unitType = "CRPGMedic";
    gv_hero[gv_hERO_SHOOTER].lv_unitType = "CRPGShooter";
    gv_hero[gv_hERO_SNIPER].lv_unitType = "CRPGSniper";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VariableInitializaiton_Init () {
    gt_VariableInitializaiton = TriggerCreate("gt_VariableInitializaiton_Func");
    TriggerAddEventMapInit(gt_VariableInitializaiton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revealer Initialization
//--------------------------------------------------------------------------------------------------
bool gt_RevealerInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup autoAC60B827_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoAC60B827_g = PlayerGroupAll();
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(autoAC60B827_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        libLbty_gf_AutoRevealRegion(RegionFromId(7), RegionFromId(7), lv_pickedPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealerInitialization_Init () {
    gt_RevealerInitialization = TriggerCreate("gt_RevealerInitialization_Func");
    TriggerAddEventMapInit(gt_RevealerInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test All Heroes
//--------------------------------------------------------------------------------------------------
bool gt_TestAllHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_level;
    int lv_pickedHero;

    // Automatic Variable Declarations
    const int autoD53F0529_ae = gv_hERO_COUNT;
    const int autoD53F0529_ai = 1;

    // Variable Initialization
    lv_level = MaxI(1, MinI(5, StringToInt(StringWord(EventChatMessage(false), 2))));

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == "-heroes"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedHero = 1;
    for ( ; ( (autoD53F0529_ai >= 0 && lv_pickedHero <= autoD53F0529_ae) || (autoD53F0529_ai < 0 && lv_pickedHero >= autoD53F0529_ae) ) ; lv_pickedHero += autoD53F0529_ai ) {
        gf_CreateSelectableHero(lv_pickedHero, EventPlayer());
        UnitXPSetCurrentLevel(UnitLastCreated(), null, lv_level);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestAllHeroes_Init () {
    gt_TestAllHeroes = TriggerCreate("gt_TestAllHeroes_Func");
    TriggerAddEventChatMessage(gt_TestAllHeroes, c_playerAny, "-heroes", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test Many Spawns
//--------------------------------------------------------------------------------------------------
bool gt_TestManySpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == "-aliens"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnAlienLoop(5000, 24, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestManySpawns_Init () {
    gt_TestManySpawns = TriggerCreate("gt_TestManySpawns_Func");
    TriggerAddEventChatMessage(gt_TestManySpawns, c_playerAny, "-aliens", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alien Initialization
//--------------------------------------------------------------------------------------------------
bool gt_AlienInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedInteger;

    // Automatic Variable Declarations
    const int autoACD900FC_ae = gv_tOTAL_NUMBER_OF_NYDUS_WORM_POINTS;
    const int autoACD900FC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedInteger = 1;
    for ( ; ( (autoACD900FC_ai >= 0 && lv_pickedInteger <= autoACD900FC_ae) || (autoACD900FC_ai < 0 && lv_pickedInteger >= autoACD900FC_ae) ) ; lv_pickedInteger += autoACD900FC_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CRPGNydusWorm", 0, gv_pLAYER_ALIEN, gv_nydusWormPoints[lv_pickedInteger]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlienInitialization_Init () {
    gt_AlienInitialization = TriggerCreate("gt_AlienInitialization_Func");
    TriggerAddEventMapInit(gt_AlienInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_alienWeight;
    fixed lv_minimumWeight;
    int lv_waveWeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alienWeight = (2 + ((gv_attackWave * gv_attackWave) * 2));
    lv_minimumWeight = (100.0 - (100.0 / (1.0 + (gv_attackWave * 0.1))));

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackWave += 1;
    if ((TechTreeUnitCount(gv_pLAYER_ALIEN, "CRPGNydusWorm", c_techCountCompleteOnly) > 0)) {
        lv_waveWeight = gf_AttackWaveFormula(PlayerGroupCount(gv_survivors));
        SoundPlayForPlayer(SoundLink("Event_Lab02_AlarmIncomingAttack", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        gf_SendBattlecruiserTransmission((StringExternal("Param/Value/1236304B") + gf_GetRandomComment()), PlayerGroupAll(), 8.0, false);
        Wait(29.0, c_timeGame);
        gf_SpawnAlienLoop(lv_waveWeight, lv_alienWeight, TruncI(lv_minimumWeight));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaves_Init () {
    gt_AttackWaves = TriggerCreate("gt_AttackWaves_Func");
    TriggerAddEventTimePeriodic(gt_AttackWaves, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Initial
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveInitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_alienWeight;
    fixed lv_minimumWeight;
    int lv_waveWeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alienWeight = (2 + ((gv_attackWave * gv_attackWave) * 2));
    lv_minimumWeight = (100.0 - (100.0 / (1.0 + (gv_attackWave * 0.1))));

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackWave += 1;
    if ((TechTreeUnitCount(gv_pLAYER_ALIEN, "CRPGNydusWorm", c_techCountCompleteOnly) > 0)) {
        lv_waveWeight = gf_AttackWaveFormula(PlayerGroupCount(gv_survivors));
        SoundPlayForPlayer(SoundLink("Event_Lab02_AlarmIncomingAttack", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        gf_SendBattlecruiserTransmission((gf_GetRandomInitialComment() + StringExternal("Param/Value/DCAA8B93")), PlayerGroupAll(), 5.0, false);
        Wait(29.0, c_timeGame);
        gf_SpawnAlienLoop(lv_waveWeight, lv_alienWeight, TruncI(lv_minimumWeight));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveInitial_Init () {
    gt_AttackWaveInitial = TriggerCreate("gt_AttackWaveInitial_Func");
    TriggerAddEventTimeElapsed(gt_AttackWaveInitial, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alien Initial Trickle
//--------------------------------------------------------------------------------------------------
bool gt_AlienInitialTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trickles;
    int lv_trickleWeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trickles = 6;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_trickles > 0)) {
        if ((TechTreeUnitCount(gv_pLAYER_ALIEN, "CRPGNydusWorm", c_techCountCompleteOnly) > 0)) {
            lv_trickleWeight = (2 * TruncI(((PlayerGroupCount(gv_survivors) * 0.5) + 1.0)));
            gf_SpawnAlienLoop(lv_trickleWeight, 2, 1);
        }

        lv_trickles -= 1;
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlienInitialTrickle_Init () {
    gt_AlienInitialTrickle = TriggerCreate("gt_AlienInitialTrickle_Func");
    TriggerAddEventMapInit(gt_AlienInitialTrickle);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alien Trickle
//--------------------------------------------------------------------------------------------------
bool gt_AlienTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_alienWeight;
    int lv_trickleWeight;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_attackWave >= 0)) {
        Wait((30 - MinI(gv_attackWave, 15)), c_timeGame);
        if ((TechTreeUnitCount(gv_pLAYER_ALIEN, "CRPGNydusWorm", c_techCountCompleteOnly) > 0)) {
            lv_alienWeight = (2 + (gv_attackWave * 2));
            lv_trickleWeight = (lv_alienWeight * TruncI(((PlayerGroupCount(gv_survivors) * 0.5) + 1.0)));
            gf_SpawnAlienLoop(lv_trickleWeight, lv_alienWeight, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlienTrickle_Init () {
    gt_AlienTrickle = TriggerCreate("gt_AlienTrickle_Func");
    TriggerAddEventMapInit(gt_AlienTrickle);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flank-SnowRoaches
//--------------------------------------------------------------------------------------------------
bool gt_FlankSnowRoaches_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup auto2E648381_g;
    int auto2E648381_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_ALIEN, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Roach_Death", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    auto2E648381_g = UnitGroupFromId(1);
    auto2E648381_u = UnitGroupCount(auto2E648381_g, c_unitCountAll);
    for (;; auto2E648381_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(auto2E648381_g, auto2E648381_u);
        if (lv_pickedUnit == null) { break; }
        libALZL_gf_WaitForTicks(1);
        libNtve_gf_ShowHideUnit(lv_pickedUnit, true);
        UnitIssueOrder(lv_pickedUnit, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        AISetUnitScriptControlled(lv_pickedUnit, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlankSnowRoaches_Init () {
    gt_FlankSnowRoaches = TriggerCreate("gt_FlankSnowRoaches_Func");
    TriggerAddEventUnitRegion(gt_FlankSnowRoaches, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Initialization
//--------------------------------------------------------------------------------------------------
bool gt_SetupInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    const int auto910CBF8E_ae = gv_pLAYER_COUNT;
    const int auto910CBF8E_ai = 1;
    int autoF4AB746A_catalog;
    int autoF4AB746A_i;
    unitgroup auto69459507_g;
    int auto69459507_u;
    unit auto69459507_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedPlayer = 1;
    for ( ; ( (auto910CBF8E_ai >= 0 && lv_pickedPlayer <= auto910CBF8E_ae) || (auto910CBF8E_ai < 0 && lv_pickedPlayer >= auto910CBF8E_ae) ) ; lv_pickedPlayer += auto910CBF8E_ai ) {
        if ((PlayerType(lv_pickedPlayer) == c_playerTypeUser)) {
            PlayerGroupAdd(gv_survivors, lv_pickedPlayer);
            libNtve_gf_SetAlliance(lv_pickedPlayer, gv_pLAYER_ALIEN, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(lv_pickedPlayer, gv_pLAYER_SURVIVOR_BASE, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            PlayerSetAlliance(lv_pickedPlayer, c_allianceIdSpend, gv_pLAYER_SURVIVOR_BASE, true);
            libNtve_gf_SetAlliance(lv_pickedPlayer, gv_pLAYER_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
            autoF4AB746A_catalog = c_gameCatalogUnit;
            autoF4AB746A_i = 1;
            for ( ; autoF4AB746A_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoF4AB746A_i += 1 ) {
                lv_unitType = CatalogEntryGet(autoF4AB746A_catalog, autoF4AB746A_i);
                if (((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ProtossUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ProtossStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/HybridUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranCharacter") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergCharacter"))) {
                    TechTreeUnitHelp(lv_pickedPlayer, lv_unitType, false);
                }

            }
            auto69459507_g = UnitGroup("NydusNetwork", gv_pLAYER_ALIEN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto69459507_u = UnitGroupCount(auto69459507_g, c_unitCountAll);
            for (;; auto69459507_u -= 1) {
                auto69459507_var = UnitGroupUnitFromEnd(auto69459507_g, auto69459507_u);
                if (auto69459507_var == null) { break; }
                VisRevealArea(lv_pickedPlayer, RegionCircle(UnitGetPosition(auto69459507_var), 4.0), 1.0, false);
            }
            gv_revives[lv_pickedPlayer] = gf_GetIntegerfromRevivesAttribute(GameAttributeGameValue("3"));
        }

    }
    gv_remainingInitialSelectors = PlayerGroupCount(gv_survivors);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    if ((GameAttributeGameValue("2") == "0001")) {
        gv_tutorialOn = true;
        gv_attackWave = -5;
        TriggerEnable(gt_TutorialChooseHeroBefore, true);
    }

    if ((GameAttributeGameValue("4") == "0001")) {
        gv_sharedMinerals = 4;
    }
    else if ((GameAttributeGameValue("4") == "0002")) {
        gv_sharedMinerals = 3;
    }
    else if ((GameAttributeGameValue("4") == "0003")) {
        gv_sharedMinerals = 2;
    }
    else if ((GameAttributeGameValue("4") == "0004")) {
        gv_sharedMinerals = 1;
    }
    else if (true) {
        TriggerEnable(gt_SharedMinerals, false);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_survivors, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    AICampaignStart(gv_pLAYER_ALIEN);
    AISetSpecificRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 0, 0), "NydusNetwork", gv_pLAYER_ALIEN);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupInitialization_Init () {
    gt_SetupInitialization = TriggerCreate("gt_SetupInitialization_Func");
    TriggerAddEventMapInit(gt_SetupInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_CreateHeroSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_validHero;
    int lv_currentUnitType;
    int lv_pickedHero;
    int lv_entriesPerRow;
    int lv_entrySeparator;
    int lv_borderPadding;
    int lv_buttonPadding;
    int lv_buttonTextHeight;
    int lv_buttonXOffset;
    int lv_buttonYOffset;
    int lv_heroSelectionButtonWidth;
    int lv_heroSelectionButtonHeight;
    int lv_heroSelectionPaneWidth;
    int lv_heroSelectionPaneHeight;

    // Automatic Variable Declarations
    const int autoFDCB00BE_ae = gv_hERO_COUNT;
    const int autoFDCB00BE_ai = 1;

    // Variable Initialization
    lv_entriesPerRow = 5;
    lv_entrySeparator = 10;
    lv_borderPadding = 40;
    lv_buttonPadding = 10;
    lv_buttonTextHeight = 30;
    lv_heroSelectionButtonWidth = 120;
    lv_heroSelectionButtonHeight = 180;
    lv_heroSelectionPaneWidth = (((lv_heroSelectionButtonWidth * lv_entriesPerRow) + (lv_entrySeparator * (lv_entriesPerRow - 1))) + (lv_borderPadding * 2));
    lv_heroSelectionPaneHeight = (((CeilingI((gv_hERO_COUNT / lv_entriesPerRow)) * ((lv_heroSelectionButtonHeight + lv_buttonTextHeight) + lv_entrySeparator)) + (lv_borderPadding * 2)) - lv_entrySeparator);

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(lv_heroSelectionPaneWidth, lv_heroSelectionPaneHeight, c_anchorCenter, 0, -100, true);
    gv_heroSelectionDialog.lv_dialog = DialogLastCreated();
    lv_pickedHero = 1;
    for ( ; ( (autoFDCB00BE_ai >= 0 && lv_pickedHero <= autoFDCB00BE_ae) || (autoFDCB00BE_ai < 0 && lv_pickedHero >= autoFDCB00BE_ae) ) ; lv_pickedHero += autoFDCB00BE_ai ) {
        if ((gv_hero[lv_pickedHero].lv_unitType != null)) {
            lv_buttonXOffset = (((lv_heroSelectionButtonWidth + lv_entrySeparator) * ModI(lv_validHero, lv_entriesPerRow)) + lv_borderPadding);
            lv_buttonYOffset = (((lv_validHero / lv_entriesPerRow) * ((lv_heroSelectionButtonHeight + lv_buttonTextHeight) + lv_entrySeparator)) + lv_borderPadding);
            libNtve_gf_CreateDialogItemButton(gv_heroSelectionDialog.lv_dialog, lv_heroSelectionButtonWidth, (lv_heroSelectionButtonHeight + lv_buttonTextHeight), c_anchorTopLeft, lv_buttonXOffset, lv_buttonYOffset, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, gv_hero[lv_pickedHero].lv_unitType, "Description", c_playerAny)), StringToText(""), "");
            gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_button = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_heroSelectionDialog.lv_dialog, (lv_heroSelectionButtonWidth - (lv_buttonPadding * 2)), (lv_heroSelectionButtonHeight - (lv_buttonPadding * 2)), c_anchorTopLeft, (lv_buttonXOffset + lv_buttonPadding), (lv_buttonYOffset + lv_buttonPadding), StringToText(""), libALZL_gf_ConvertUnitToPortraitImage(gv_hero[lv_pickedHero].lv_unitType), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_icon = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_heroSelectionDialog.lv_dialog, (lv_heroSelectionButtonWidth - (lv_buttonPadding * 2)), (lv_buttonTextHeight - lv_buttonPadding), c_anchorTopLeft, (lv_buttonXOffset + lv_buttonPadding), (lv_buttonYOffset + lv_heroSelectionButtonHeight), StringExternal(gf_UnitNamePathFromHeroID(lv_pickedHero)), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
            gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_label = DialogControlLastCreated();
            gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_disabled = false;
            lv_validHero += 1;
        }

    }
    lv_pickedHero = (gv_hERO_COUNT + 1);
    lv_buttonXOffset = (((lv_heroSelectionButtonWidth + lv_entrySeparator) * ModI(lv_validHero, lv_entriesPerRow)) + lv_borderPadding);
    lv_buttonYOffset = (((lv_validHero / lv_entriesPerRow) * ((lv_heroSelectionButtonHeight + lv_buttonTextHeight) + lv_entrySeparator)) + lv_borderPadding);
    libNtve_gf_CreateDialogItemButton(gv_heroSelectionDialog.lv_dialog, lv_heroSelectionButtonWidth, (lv_heroSelectionButtonHeight + lv_buttonTextHeight), c_anchorTopLeft, lv_buttonXOffset, lv_buttonYOffset, StringExternal("Param/Value/C65ED867"), StringToText(""), "");
    gv_heroRandomDialogButton.lv_dialogItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroSelectionDialog.lv_dialog, (lv_heroSelectionButtonWidth - (lv_buttonPadding * 2)), (lv_heroSelectionButtonHeight - (lv_buttonPadding * 2)), c_anchorTopLeft, (lv_buttonXOffset + lv_buttonPadding), (lv_buttonYOffset + lv_buttonPadding), StringToText(""), "Assets\\Textures\\ui_battlenet_loading_player_raceicon_random.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_heroRandomDialogButton.lv_dialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_heroSelectionDialog.lv_dialog, (lv_heroSelectionButtonWidth - (lv_buttonPadding * 2)), (lv_buttonTextHeight - lv_buttonPadding), c_anchorTopLeft, (lv_buttonXOffset + lv_buttonPadding), (lv_buttonYOffset + lv_heroSelectionButtonHeight), StringExternal("Param/Value/544FA7CC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    gv_heroRandomDialogButton.lv_dialogItem[2] = DialogControlLastCreated();
    gv_heroRandomDialogButton.lv_disabled = false;
    lv_validHero += 1;
    DialogSetVisible(gv_heroSelectionDialog.lv_dialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateHeroSelection_Init () {
    gt_CreateHeroSelection = TriggerCreate("gt_CreateHeroSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedDialog;
    int lv_selectedHero;

    // Automatic Variable Declarations
    const int auto82686D2F_ae = gv_hERO_COUNT;
    const int auto82686D2F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_playerSelecting[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_heroRandomDialogButton.lv_dialogItem[0])) {
        gv_playerSelecting[EventPlayer()] = false;
        lv_selectedHero = gf_GetRandomHeroID(EventPlayer());
    }
    else {
        lv_pickedDialog = 1;
        for ( ; ( (auto82686D2F_ai >= 0 && lv_pickedDialog <= auto82686D2F_ae) || (auto82686D2F_ai < 0 && lv_pickedDialog >= auto82686D2F_ae) ) ; lv_pickedDialog += auto82686D2F_ai ) {
            if ((EventDialogControl() == gv_heroSelectionDialog.lv_dialogRecord[lv_pickedDialog].lv_button)) {
                gv_playerSelecting[EventPlayer()] = false;
                lv_selectedHero = lv_pickedDialog;
                break;
            }
        }
    }
    if ((lv_selectedHero > 0)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/C50F4CC2"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/8427AE5A"), StringExternal("Param/Value/B83F9CD1"), "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel0.dds");
        gf_SelectHero(lv_selectedHero, gf_GetIntegerfromStartingLevelAttribute(GameAttributeGameValue("1")), EventPlayer());
        if ((gv_remainingInitialSelectors == 0)) {
            TriggerExecute(gt_FreeHeroes, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelection_Init () {
    gt_HeroSelection = TriggerCreate("gt_HeroSelection_Func");
    TriggerAddEventDialogControl(gt_HeroSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Free Heroes
//--------------------------------------------------------------------------------------------------
bool gt_FreeHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedInteger;

    // Automatic Variable Declarations
    unitgroup auto2E13DCC1_g;
    int auto2E13DCC1_u;
    unit auto2E13DCC1_var;
    unitgroup auto27B12266_g;
    int auto27B12266_u;
    unit auto27B12266_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((ObjectiveGetState(gv_objectives[0]) != c_objectiveStateActive))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_objectives[ge_OBJECTIVES_KILL_NESTS], c_objectiveStateActive);
    ObjectiveSetState(gv_objectives[ge_OBJECTIVES_CRASHED_BATTLECRUISER_SURVIVE], c_objectiveStateActive);
    TriggerDestroy(gt_SelectionTimeout);
    TriggerDestroy(gt_SelectionTimeout);
    TimerWindowDestroy(gv_heroSelectionTimerWindow);
    libNtve_gf_StopTimer(gv_heroSelectionTimer);
    auto2E13DCC1_g = UnitGroup(null, 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2E13DCC1_u = UnitGroupCount(auto2E13DCC1_g, c_unitCountAll);
    for (;; auto2E13DCC1_u -= 1) {
        auto2E13DCC1_var = UnitGroupUnitFromEnd(auto2E13DCC1_g, auto2E13DCC1_u);
        if (auto2E13DCC1_var == null) { break; }
        if ((UnitGetType(auto2E13DCC1_var) != "CRPGBuildableLocationDefensiveFortification") && (UnitGetType(auto2E13DCC1_var) != "CRPGBuildableLocationDefensiveTurret") && (UnitGetType(auto2E13DCC1_var) != "CRPGBuildableLocationDefensiveWall")) {
            UnitRemove(auto2E13DCC1_var);
        }

    }
    auto27B12266_g = UnitGroup(null, gv_pLAYER_SURVIVOR_BASE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto27B12266_u = UnitGroupCount(auto27B12266_g, c_unitCountAll);
    for (;; auto27B12266_u -= 1) {
        auto27B12266_var = UnitGroupUnitFromEnd(auto27B12266_g, auto27B12266_u);
        if (auto27B12266_var == null) { break; }
        if (((UnitGetType(auto27B12266_var) == "CRPGDefensiveFortification") || (UnitGetType(auto27B12266_var) == "CRPGDefensiveWall") || (UnitGetType(auto27B12266_var) == "CRPGDefensiveWall@Lowered"))) {
            UnitSetPropertyFixed(auto27B12266_var, c_unitPropLifePercent, RandomFixed(10.0, 12.0));
        }
        else if ((UnitGetType(auto27B12266_var) == "CRPGDefensiveTurret")) {
            UnitSetPropertyFixed(auto27B12266_var, c_unitPropLifePercent, RandomFixed(28.0, 30.0));
        }
    }
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Dialogue_Transmission5Seconds", 0), StringExternal("Param/Value/542E0D2F"), StringExternal("Param/Value/08C794E5"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    gf_SendBattlecruiserTransmission(StringExternal("Param/Value/7DAC45F4"), PlayerGroupAll(), 5.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FreeHeroes_Init () {
    gt_FreeHeroes = TriggerCreate("gt_FreeHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selection Timeout
//--------------------------------------------------------------------------------------------------
bool gt_SelectionTimeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedPlayer;
    bool lv_avoidedPick;
    int lv_numberofCivilians;
    fixed lv_waitTimer;
    int lv_randomHero;

    // Automatic Variable Declarations
    const int auto875BE299_ae = gv_pLAYER_COUNT;
    const int auto875BE299_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_tutorialOn == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedPlayer = 1;
    for ( ; ( (auto875BE299_ai >= 0 && lv_pickedPlayer <= auto875BE299_ae) || (auto875BE299_ai < 0 && lv_pickedPlayer >= auto875BE299_ae) ) ; lv_pickedPlayer += auto875BE299_ai ) {
        if ((PlayerGroupHasPlayer(gv_survivors, lv_pickedPlayer) == true) && (gv_playerSelecting[lv_pickedPlayer] == true)) {
            lv_randomHero = gf_GetRandomHeroID(lv_pickedPlayer);
            if ((lv_randomHero != 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pickedPlayer, false))) + StringExternal("Param/Value/D8CFCC6B") + StringExternal(gf_UnitNamePathFromHeroID(lv_randomHero)) + StringExternal("Param/Value/1F28A27C")));
                gf_SelectHero(lv_randomHero, gf_GetIntegerfromStartingLevelAttribute(GameAttributeGameValue("1")), lv_pickedPlayer);
                lv_randomHero = 0;
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pickedPlayer, false))) + StringExternal("Param/Value/CF5D07F8")));
            }
        }

    }
    if ((gv_remainingInitialSelectors == 0)) {
        TriggerExecute(gt_FreeHeroes, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectionTimeout_Init () {
    gt_SelectionTimeout = TriggerCreate("gt_SelectionTimeout_Func");
    TriggerAddEventTimer(gt_SelectionTimeout, gv_heroSelectionTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skip Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_SkipCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkipCinematic_Init () {
    gt_SkipCinematic = TriggerCreate("gt_SkipCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Battlecruiser Scene
//--------------------------------------------------------------------------------------------------
bool gt_StartBattlecruiserScene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    unitgroup autoA15820B1_g;
    int autoA15820B1_u;
    unit autoA15820B1_var;
    playergroup auto1F78CCF2_g;
    int auto1F78CCF2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), (PlayerGroupCount(gv_survivors) / 2), gt_EndCinematic, true, false);
    TechTreeAbilityAllow(gv_pLAYER_SURVIVOR_BASE, AbilityCommand("DefensiveTurretHellstormMissilePods", 0), false);
    autoA15820B1_g = UnitGroup("CRPGCrashedBattlecruiser", gv_pLAYER_SURVIVOR_BASE, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA15820B1_u = UnitGroupCount(autoA15820B1_g, c_unitCountAll);
    for (;; autoA15820B1_u -= 1) {
        autoA15820B1_var = UnitGroupUnitFromEnd(autoA15820B1_g, autoA15820B1_u);
        if (autoA15820B1_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA15820B1_var, false);
    }
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    auto1F78CCF2_g = gv_survivors;
    auto1F78CCF2_var = -1;
    while (true) {
        auto1F78CCF2_var = PlayerGroupNextPlayer(auto1F78CCF2_g, auto1F78CCF2_var);
        if (auto1F78CCF2_var < 0) { break; }
        CameraPan(auto1F78CCF2_var, UnitGetPosition(UnitFromId(640316847)), 0.0, -1, 10.0, false);
        CameraPan(auto1F78CCF2_var, PointFromId(1236227694), 7.0, -1, 10.0, false);
    }
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    gf_SendBattlecruiserTransmission(StringExternal("Param/Value/5F6C341E"), PlayerGroupAll(), 5.0, false);
    UnitIssueOrder(UnitFromId(640316847), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1236227694)), c_orderQueueReplace);
    UnitSetHeight(UnitFromId(640316847), -1.0, 6.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBattlecruiserScene_Init () {
    gt_StartBattlecruiserScene = TriggerCreate("gt_StartBattlecruiserScene_Func");
    TriggerAddEventMapInit(gt_StartBattlecruiserScene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Crash
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruiserCrash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    gv_fading = true;
    CinematicFade(false, 2.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_EndCinematic();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruiserCrash_Init () {
    gt_BattlecruiserCrash = TriggerCreate("gt_BattlecruiserCrash_Func");
    TriggerAddEventUnitRangePoint(gt_BattlecruiserCrash, UnitRefFromUnit(UnitFromId(640316847)), PointFromId(25930053), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_EndCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFABD877B_g;
    int autoFABD877B_var;
    unitgroup auto065804BD_g;
    int auto065804BD_u;
    unit auto065804BD_var;
    playergroup autoA20C7F08_g;
    int autoA20C7F08_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_fading == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }

    TechTreeAbilityAllow(gv_pLAYER_SURVIVOR_BASE, AbilityCommand("DefensiveTurretHellstormMissilePods", 0), true);
    autoFABD877B_g = gv_survivors;
    autoFABD877B_var = -1;
    while (true) {
        autoFABD877B_var = PlayerGroupNextPlayer(autoFABD877B_g, autoFABD877B_var);
        if (autoFABD877B_var < 0) { break; }
        DialogSetVisible(gv_cBDialog[0].lv_dialog, PlayerGroupSingle(autoFABD877B_var), true);
    }
    auto065804BD_g = UnitGroup("CRPGCrashedBattlecruiser", gv_pLAYER_SURVIVOR_BASE, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto065804BD_u = UnitGroupCount(auto065804BD_g, c_unitCountAll);
    for (;; auto065804BD_u -= 1) {
        auto065804BD_var = UnitGroupUnitFromEnd(auto065804BD_g, auto065804BD_u);
        if (auto065804BD_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto065804BD_var, true);
    }
    autoA20C7F08_g = gv_survivors;
    autoA20C7F08_var = -1;
    while (true) {
        autoA20C7F08_var = PlayerGroupNextPlayer(autoA20C7F08_g, autoA20C7F08_var);
        if (autoA20C7F08_var < 0) { break; }
        DialogSetVisible(gv_mineralPoolDialog[autoA20C7F08_var].lv_dialog, PlayerGroupSingle(autoA20C7F08_var), true);
    }
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(1));
    TriggerExecute(gt_CreateHeroSelection, true, false);
    if ((gv_tutorialOn == false)) {
        TimerStart(TimerCreate(), 60.0, false, c_timeGame);
        gv_heroSelectionTimer = TimerLastStarted();
        TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/CB95D855"), true, false);
        gv_heroSelectionTimerWindow = TimerWindowLastCreated();
        TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
        TimerWindowShowBorder(TimerWindowLastCreated(), true);
        TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleHorizontalTitleTime, false);
        TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
    }

    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_SendBattlecruiserTransmission(StringExternal("Param/Value/0A4F127A"), PlayerGroupAll(), 5.0, true);
    gf_SendBattlecruiserTransmission(StringExternal("Param/Value/68E42E9C"), PlayerGroupAll(), 5.0, true);
    if ((gv_tutorialOn == true)) {
        TriggerExecute(gt_TutorialStart, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCinematic_Init () {
    gt_EndCinematic = TriggerCreate("gt_EndCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Start
//--------------------------------------------------------------------------------------------------
bool gt_TutorialStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9092E898"));
    Wait(8.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/476C0BF0"));
    TriggerEnable(gt_TutorialChooseHeroAfter, true);
    TriggerEnable(gt_TutorialChooseHeroBefore, false);
    Wait(8.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9DF27DB0"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialStart_Init () {
    gt_TutorialStart = TriggerCreate("gt_TutorialStart_Func");
    TriggerEnable(gt_TutorialStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Choose Hero (Before)
//--------------------------------------------------------------------------------------------------
bool gt_TutorialChooseHeroBefore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TutorialChooseHeroBefore, false);
    TriggerStop(gt_TutorialStart);
    TriggerStop(gt_BattlecruiserCrash);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3A90E5BA"));
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_TutorialMechanicalIntroduction, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialChooseHeroBefore_Init () {
    gt_TutorialChooseHeroBefore = TriggerCreate("gt_TutorialChooseHeroBefore_Func");
    TriggerEnable(gt_TutorialChooseHeroBefore, false);
    TriggerAddEventUnitAbility(gt_TutorialChooseHeroBefore, null, AbilityCommand("BeaconGiveHero", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Choose Hero (After)
//--------------------------------------------------------------------------------------------------
bool gt_TutorialChooseHeroAfter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TutorialChooseHeroAfter, false);
    TriggerStop(gt_TutorialStart);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E896D6D8"));
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_TutorialMechanicalIntroduction, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialChooseHeroAfter_Init () {
    gt_TutorialChooseHeroAfter = TriggerCreate("gt_TutorialChooseHeroAfter_Func");
    TriggerEnable(gt_TutorialChooseHeroAfter, false);
    TriggerAddEventUnitAbility(gt_TutorialChooseHeroAfter, null, AbilityCommand("BeaconGiveHero", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Mechanical Introduction
//--------------------------------------------------------------------------------------------------
bool gt_TutorialMechanicalIntroduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1B64C708"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/72FF55C3"));
    libNtve_gf_AttachModelToUnit(gv_tutorialHero, "BriefingUnitSelectSmall", "Ref_Origin");
    UISetButtonFaceHighlighted(PlayerGroupAll(), "CRPGLevelUp", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SwarmerMergeSelected", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SwarmerEvolve", true);
    Wait(10.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    UISetButtonFaceHighlighted(PlayerGroupAll(), "CRPGLevelUp", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SwarmerMergeSelected", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SwarmerEvolve", false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CA00482D"));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", UnitGetPosition(UnitGroupUnit(UnitGroupSearch("CRPGArmory", UnitGetOwner(gv_tutorialHero), RegionGetCenter(RegionFromId(1)), 30.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArmoryUpgradeDamage", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArmoryUpgradeArmor", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArmoryUpgradeEnergy", true);
    Wait(10.0, c_timeGame);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArmoryUpgradeDamage", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArmoryUpgradeArmor", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "ArmoryUpgradeEnergy", false);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F8985FEE"));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", UnitGetPosition(UnitGroupUnit(UnitGroupSearch("CRPGCrashedBattlecruiserPlayer", UnitGetOwner(gv_tutorialHero), RegionGetCenter(RegionFromId(1)), 30.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)));
    Wait(10.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3A859AA3"));
    Wait(8.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C890F433"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialMechanicalIntroduction_Init () {
    gt_TutorialMechanicalIntroduction = TriggerCreate("gt_TutorialMechanicalIntroduction_Func");
    TriggerEnable(gt_TutorialMechanicalIntroduction, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crashed Battlecruiser Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CrashedBattlecruiserDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cBDialog[lv_pickedPlayer].lv_targetUnit = gv_baseCrashedBattlecruiser;
    DialogCreate(500, 136, c_anchorTopLeft, 10, 10, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\crashed-battlecruiser-dialog-background.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_cBDialog[lv_pickedPlayer].lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 380, 30, c_anchorTopLeft, 110, 10, StringExternal("Param/Value/65A97475"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_cBDialog[lv_pickedPlayer].lv_name = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 116, c_anchorTopLeft, 17, 10, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, "CRPGCrashedBattlecruiser", "Description", c_playerAny)), "Assets\\Textures\\battlecruiserportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_cBDialog[lv_pickedPlayer].lv_portrait = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 380, 30, c_anchorTopLeft, 110, 40, StringExternal("Param/Value/D6121FA2"), "Assets\\Textures\\border-transportslot-filled.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 366, 16, c_anchorTopLeft, 117, 47, StringToText(""), "Assets\\Textures\\ui_ingame_lotv_progressbarfill_terr.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_cBDialog[lv_pickedPlayer].lv_lifeBar = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 366, 16, c_anchorTopLeft, 117, 47, (FixedToText(UnitGetPropertyFixed(gv_cBDialog[lv_pickedPlayer].lv_targetUnit, c_unitPropLife, c_unitPropCurrent), c_fixedPrecisionAny) + StringExternal("Param/Value/90EE7B42") + FixedToText(UnitGetPropertyFixed(gv_cBDialog[lv_pickedPlayer].lv_targetUnit, c_unitPropLifeMax, c_unitPropCurrent), c_fixedPrecisionAny)), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_cBDialog[lv_pickedPlayer].lv_life = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 190, 30, c_anchorTopLeft, 110, 70, StringExternal("Param/Value/578BB5FA"), "Assets\\Textures\\border-transportslot-filled.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 176, 16, c_anchorTopLeft, 117, 77, StringToText(""), "Assets\\Textures\\ui_ingame_lotv_progressbarfill.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_cBDialog[lv_pickedPlayer].lv_mineralBar = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 366, 16, c_anchorTopLeft, 117, 77, StringExternal("Param/Value/FA77A1AD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_cBDialog[lv_pickedPlayer].lv_mineral = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrashedBattlecruiserDialog_Init () {
    gt_CrashedBattlecruiserDialog = TriggerCreate("gt_CrashedBattlecruiserDialog_Func");
    TriggerAddEventMapInit(gt_CrashedBattlecruiserDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Crashed Battlecruiser
//--------------------------------------------------------------------------------------------------
bool gt_SelectCrashedBattlecruiser_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A2CBA5BD"));
    if (((EventDialogControl() == gv_cBDialog[0].lv_portrait) || (EventDialogControl() == gv_cBDialog[EventPlayer()].lv_portrait)) && (gv_cBDialog[EventPlayer()].lv_targetUnit != null)) {
        if ((EventKeyShift() == true)) {
            UnitSelect(gv_cBDialog[EventPlayer()].lv_targetUnit, EventPlayer(), true);
        }
        else {
            UnitClearSelection(EventPlayer());
            UnitSelect(gv_cBDialog[EventPlayer()].lv_targetUnit, EventPlayer(), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectCrashedBattlecruiser_Init () {
    gt_SelectCrashedBattlecruiser = TriggerCreate("gt_SelectCrashedBattlecruiser_Func");
    TriggerAddEventDialogControl(gt_SelectCrashedBattlecruiser, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crashed Battlecruiser Damaged
//--------------------------------------------------------------------------------------------------
bool gt_CrashedBattlecruiserDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto66723BA9_g;
    int auto66723BA9_u;
    unit auto66723BA9_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CRPGCrashedBattlecruiser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto66723BA9_g = UnitGroup("CRPGCrashedBattlecruiserPlayer", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66723BA9_u = UnitGroupCount(auto66723BA9_g, c_unitCountAll);
    for (;; auto66723BA9_u -= 1) {
        auto66723BA9_var = UnitGroupUnitFromEnd(auto66723BA9_g, auto66723BA9_u);
        if (auto66723BA9_var == null) { break; }
        UnitSetPropertyFixed(auto66723BA9_var, c_unitPropLife, UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
    }
    DialogControlSetSize(gv_cBDialog[0].lv_lifeBar, PlayerGroupAll(), MinI(MaxI(CeilingI(((UnitGetPropertyFixed(gv_cBDialog[0].lv_targetUnit, c_unitPropLife, c_unitPropCurrent) / UnitGetPropertyFixed(gv_cBDialog[0].lv_targetUnit, c_unitPropLifeMax, c_unitPropCurrent)) * 366.0)), 1), 366), 16);
    libNtve_gf_SetDialogItemText(gv_cBDialog[0].lv_life, (IntToText(TruncI(UnitGetPropertyFixed(gv_cBDialog[0].lv_targetUnit, c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/0A09DE0E") + FixedToText(UnitGetPropertyFixed(gv_cBDialog[0].lv_targetUnit, c_unitPropLifeMax, c_unitPropCurrent), c_fixedPrecisionAny)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrashedBattlecruiserDamaged_Init () {
    gt_CrashedBattlecruiserDamaged = TriggerCreate("gt_CrashedBattlecruiserDamaged_Func");
    TriggerAddEventUnitDamaged(gt_CrashedBattlecruiserDamaged, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitHealed(gt_CrashedBattlecruiserDamaged, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_survivors, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_survivors, EventPlayer());
    if ((gv_playerSelecting[EventPlayer()] == true)) {
        gv_remainingInitialSelectors -= 1;
        if ((gv_remainingInitialSelectors == 0)) {
            TriggerExecute(gt_FreeHeroes, true, false);
        }

    }

    if ((PlayerGroupCount(gv_survivors) > 0)) {
    }
    else {
        gf_GameOver();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Dies
//--------------------------------------------------------------------------------------------------
bool gt_PlayerDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hasHero;
    bool lv_heroesAvailable;
    int lv_pickedHero;

    // Automatic Variable Declarations
    unitgroup auto2EAD7728_g;
    int auto2EAD7728_u;
    unit auto2EAD7728_var;
    unitgroup autoA43C16AE_g;
    int autoA43C16AE_u;
    unit autoA43C16AE_var;
    const int auto5C3FC1A7_ae = gv_hERO_COUNT;
    const int auto5C3FC1A7_ai = 1;
    unitgroup auto74119161_g;
    int auto74119161_u;
    unit auto74119161_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_survivors, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2EAD7728_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2EAD7728_u = UnitGroupCount(auto2EAD7728_g, c_unitCountAll);
    for (;; auto2EAD7728_u -= 1) {
        auto2EAD7728_var = UnitGroupUnitFromEnd(auto2EAD7728_g, auto2EAD7728_u);
        if (auto2EAD7728_var == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(auto2EAD7728_var), c_unitFlagHero) == true)) {
            lv_hasHero = true;
            break;
        }

    }
    if ((lv_hasHero == false)) {
        if ((gv_revives[EventPlayer()] == 0)) {
            PlayerGroupRemove(gv_survivors, EventPlayer());
            auto74119161_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto74119161_u = UnitGroupCount(auto74119161_g, c_unitCountAll);
            for (;; auto74119161_u -= 1) {
                auto74119161_var = UnitGroupUnitFromEnd(auto74119161_g, auto74119161_u);
                if (auto74119161_var == null) { break; }
                UnitKill(auto74119161_var);
            }
            if ((PlayerGroupCount(gv_survivors) > 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/3BFD9EC1")));
            }
            else {
                gf_GameOver();
            }
        }
        else {
            autoA43C16AE_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoA43C16AE_u = UnitGroupCount(autoA43C16AE_g, c_unitCountAll);
            for (;; autoA43C16AE_u -= 1) {
                autoA43C16AE_var = UnitGroupUnitFromEnd(autoA43C16AE_g, autoA43C16AE_u);
                if (autoA43C16AE_var == null) { break; }
                if ((UnitGetType(autoA43C16AE_var) != "CRPGArmory") && (UnitGetType(autoA43C16AE_var) != "CRPGCrashedBattlecruiserPlayer") && (UnitGetType(autoA43C16AE_var) != "CRPGDefensiveWall") && (UnitGetType(autoA43C16AE_var) != "CRPGDefensiveTurret") && (UnitGetType(autoA43C16AE_var) != "CRPGDefensiveFortification") && (UnitGetType(autoA43C16AE_var) != "CRPGGhost") && (UnitGetType(autoA43C16AE_var) != "CRPGMarauder") && (UnitGetType(autoA43C16AE_var) != "CRPGMarine") && (UnitGetType(autoA43C16AE_var) != "CRPGNomad")) {
                    UnitKill(autoA43C16AE_var);
                }

            }
            lv_pickedHero = 1;
            for ( ; ( (auto5C3FC1A7_ai >= 0 && lv_pickedHero <= auto5C3FC1A7_ae) || (auto5C3FC1A7_ai < 0 && lv_pickedHero >= auto5C3FC1A7_ae) ) ; lv_pickedHero += auto5C3FC1A7_ai ) {
                if ((gv_heroSelectionDialog.lv_dialogRecord[lv_pickedHero].lv_disabled == false)) {
                    lv_heroesAvailable = true;
                    break;
                }

            }
            if ((lv_heroesAvailable == true)) {
                if ((gv_revives[EventPlayer()] != -1)) {
                    gv_revives[EventPlayer()] -= 1;
                }

                gv_playerSelecting[EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/1CFFF380")));
                DialogSetVisible(gv_heroSelectionDialog.lv_dialog, PlayerGroupSingle(EventPlayer()), true);
                CameraPan(EventPlayer(), PointFromId(1236227694), 2.0, -1, 10.0, false);
            }
            else {
                PlayerGroupRemove(gv_survivors, EventPlayer());
                if ((PlayerGroupCount(gv_survivors) > 0)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/77BD9AF2")));
                }
                else {
                    gf_GameOver();
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerDies_Init () {
    gt_PlayerDies = TriggerCreate("gt_PlayerDies_Func");
    TriggerAddEventUnitDied(gt_PlayerDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shared Minerals
//--------------------------------------------------------------------------------------------------
bool gt_SharedMinerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mineralValue;
    fixed lv_unitValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitValue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "KillResource[" + IntToString(0) + "]", gv_pLAYER_ALIEN);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_ALIEN))) {
            return false;
        }

        if (!(((PlayerGroupHasPlayer(gv_survivors, libNtve_gf_KillingPlayer()) == true) || (libNtve_gf_KillingPlayer() == gv_pLAYER_SURVIVOR_BASE)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_calculatingMinerals == true)) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_survivors, libNtve_gf_KillingPlayer()) == true)) {
        lv_mineralValue = ((lv_unitValue / 4.0) * gv_sharedMinerals);
    }
    else {
        lv_mineralValue = lv_unitValue;
    }
    gf_AddMineralsToPool(lv_mineralValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SharedMinerals_Init () {
    gt_SharedMinerals = TriggerCreate("gt_SharedMinerals_Func");
    TriggerAddEventUnitDied(gt_SharedMinerals, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SideM - Objective Init
//--------------------------------------------------------------------------------------------------
bool gt_SideMObjectiveInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate((StringExternal("Param/Value/F8A47375") + IntToText(0) + StringExternal("Param/Value/CE462341")), StringToText(""), c_objectiveStateHidden, false);
    gv_sideObjective[gv_sIDEM_NYDUS].lv_objective = ObjectiveLastCreated();
    ObjectiveCreate((StringExternal("Param/Value/D018C351") + IntToText(0) + StringExternal("Param/Value/6FEDB9F2")), StringToText(""), c_objectiveStateHidden, false);
    gv_sideObjective[gv_sIDEM_DROP_POD].lv_objective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SideMObjectiveInit_Init () {
    gt_SideMObjectiveInit = TriggerCreate("gt_SideMObjectiveInit_Func");
    TriggerAddEventMapInit(gt_SideMObjectiveInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SideM-Drop Pod
//--------------------------------------------------------------------------------------------------
bool gt_SideMDropPod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropPoint;
    int lv_remainingWorms;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (((RegionContainsPoint(RegionFromId(1), lv_dropPoint) == true) || (RegionContainsPoint(RegionFromId(2), lv_dropPoint) == true) || (RegionContainsPoint(RegionFromId(4), lv_dropPoint) == true) || (RegionContainsPoint(RegionFromId(5), lv_dropPoint) == true) || (RegionContainsPoint(RegionFromId(3), lv_dropPoint) == true))) {
        lv_dropPoint = UnitTypePlacementFromPoint("NydusCanal", gv_pLAYER_ALIEN, RegionRandomPoint(RegionPlayableMap()), 3.0);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_ALIEN, lv_dropPoint);
    UnitGroupAdd(gv_nydusWorms, UnitLastCreated());
    lv_remainingWorms = UnitGroupCount(gv_nydusWorms, c_unitCountAlive);
    if ((lv_remainingWorms == 1)) {
        ObjectiveCreate((StringExternal("Param/Value/20E0F727") + IntToText(lv_remainingWorms) + StringExternal("Param/Value/514EC948")), StringToText(""), c_objectiveStateActive, false);
    }
    else {
        ObjectiveSetName(gv_sideObjective[0].lv_objective, (StringExternal("Param/Value/EC0958B2") + IntToText(lv_remainingWorms) + StringExternal("Param/Value/18C6E8E2")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SideMDropPod_Init () {
    gt_SideMDropPod = TriggerCreate("gt_SideMDropPod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Side Mission Loop
//--------------------------------------------------------------------------------------------------
bool gt_SideMissionLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_randomMission = RandomInt(1, gv_sIDE_MISSION_COUNT);
        if ((lv_randomMission == gv_sIDEM_NYDUS)) {
            TriggerExecute(gt_SideMObjectiveInit, true, false);
        }
        else if ((lv_randomMission == gv_sIDEM_DROP_POD)) {
            TriggerExecute(gt_SideMDropPod, true, false);
        }
        Wait(300.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SideMissionLoop_Init () {
    gt_SideMissionLoop = TriggerCreate("gt_SideMissionLoop_Func");
    TriggerAddEventTimeElapsed(gt_SideMissionLoop, 180.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Loses Crashed Battlecruiser
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLosesCrashedBattlecruiser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hasBattlecruiser;

    // Automatic Variable Declarations
    unitgroup auto9A2BBEC6_g;
    int auto9A2BBEC6_u;
    unit auto9A2BBEC6_var;
    unitgroup auto20FC4F83_g;
    int auto20FC4F83_u;
    unit auto20FC4F83_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CRPGCrashedBattlecruiser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9A2BBEC6_g = UnitGroup("CRPGCrashedBattlecruiser", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9A2BBEC6_u = UnitGroupCount(auto9A2BBEC6_g, c_unitCountAll);
    for (;; auto9A2BBEC6_u -= 1) {
        auto9A2BBEC6_var = UnitGroupUnitFromEnd(auto9A2BBEC6_g, auto9A2BBEC6_u);
        if (auto9A2BBEC6_var == null) { break; }
        lv_hasBattlecruiser = true;
        break;
    }
    if ((lv_hasBattlecruiser == false)) {
        if ((UnitGetOwner(EventUnit()) == gv_pLAYER_SURVIVOR_BASE)) {
            auto20FC4F83_g = UnitGroup("CRPGCrashedBattlecruiserPlayer", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto20FC4F83_u = UnitGroupCount(auto20FC4F83_g, c_unitCountAll);
            for (;; auto20FC4F83_u -= 1) {
                auto20FC4F83_var = UnitGroupUnitFromEnd(auto20FC4F83_g, auto20FC4F83_u);
                if (auto20FC4F83_var == null) { break; }
                PlayerGroupRemove(gv_survivors, UnitGetOwner(EventUnit()));
                UnitKill(auto20FC4F83_var);
            }
            ObjectiveSetState(gv_objectives[ge_OBJECTIVES_CRASHED_BATTLECRUISER_SURVIVE], c_objectiveStateFailed);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Dialogue_Transmission5Seconds", 0), StringExternal("Param/Value/8DD068BB"), StringExternal("Param/Value/90DA709B"), 3.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupSingle(UnitGetOwner(EventUnit())), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Dialogue_Transmission5Seconds", 0), StringExternal("Param/Value/422FFBA2"), StringExternal("Param/Value/729D299C"), 3.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            ObjectiveSetState(gv_objectives[ge_OBJECTIVES_CRASHED_BATTLECRUISER_SURVIVE], c_objectiveStateFailed);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLosesCrashedBattlecruiser_Init () {
    gt_PlayerLosesCrashedBattlecruiser = TriggerCreate("gt_PlayerLosesCrashedBattlecruiser_Func");
    TriggerAddEventUnitDied(gt_PlayerLosesCrashedBattlecruiser, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Ojbectives
//--------------------------------------------------------------------------------------------------
bool gt_CreateOjbectives_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreateForPlayers((StringExternal("Param/Value/D287BDA5") + IntToText((gv_maxAlienSpawners - TechTreeUnitCount(gv_pLAYER_ALIEN, "NydusNetwork", c_techCountCompleteOnly))) + StringExternal("Param/Value/53765FE9") + IntToText(gv_maxAlienSpawners) + StringExternal("Param/Value/4B5908D5")), StringExternal("Param/Value/8F921BB3"), c_objectiveStateHidden, true, gv_survivors);
    gv_objectives[ge_OBJECTIVES_KILL_NESTS] = ObjectiveLastCreated();
    ObjectiveCreateForPlayers(StringExternal("Param/Value/C2BC66ED"), StringExternal("Param/Value/F091DBE2"), c_objectiveStateHidden, false, gv_survivors);
    gv_objectives[ge_OBJECTIVES_CRASHED_BATTLECRUISER_SURVIVE] = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateOjbectives_Init () {
    gt_CreateOjbectives = TriggerCreate("gt_CreateOjbectives_Func");
    TriggerAddEventMapInit(gt_CreateOjbectives);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Condition
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCondition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_survivingAlienNests;

    // Automatic Variable Declarations
    playergroup autoD652105A_g;
    int autoD652105A_var;
    playergroup auto51C7E2CA_g;
    int auto51C7E2CA_var;

    // Variable Initialization
    lv_survivingAlienNests = UnitGroupCount(UnitGroup("NydusNetwork", gv_pLAYER_ALIEN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NydusNetwork"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_ALIEN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(gv_objectives[0], (StringExternal("Param/Value/ABD3DF24") + IntToText((gv_maxAlienSpawners - lv_survivingAlienNests)) + StringExternal("Param/Value/9146494C") + IntToText(gv_maxAlienSpawners) + StringExternal("Param/Value/CA150F5F")));
    if ((lv_survivingAlienNests == 0)) {
        TriggerEnable(gt_PlayerDies, false);
        TriggerEnable(gt_PlayerLeaves, false);
        ObjectiveSetState(gv_objectives[0], c_objectiveStateCompleted);
        gf_SendBattlecruiserTransmission(StringExternal("Param/Value/0229372C"), PlayerGroupAll(), 6.0, true);
        autoD652105A_g = PlayerGroupAll();
        autoD652105A_var = -1;
        while (true) {
            autoD652105A_var = PlayerGroupNextPlayer(autoD652105A_g, autoD652105A_var);
            if (autoD652105A_var < 0) { break; }
            if ((PlayerType(autoD652105A_var) == c_playerTypeUser)) {
                if ((PlayerType(autoD652105A_var) == c_playerTypeUser)) {
                    if ((PlayerGroupHasPlayer(gv_survivors, autoD652105A_var) == true)) {
                        UIDisplayMessage(PlayerGroupSingle(autoD652105A_var), c_messageAreaSubtitle, StringExternal("Param/Value/24329654"));
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(autoD652105A_var), c_messageAreaSubtitle, StringExternal("Param/Value/1D958381"));
                    }
                }

            }

        }
        Wait(4.0, c_timeReal);
        auto51C7E2CA_g = PlayerGroupAll();
        auto51C7E2CA_var = -1;
        while (true) {
            auto51C7E2CA_var = PlayerGroupNextPlayer(auto51C7E2CA_g, auto51C7E2CA_var);
            if (auto51C7E2CA_var < 0) { break; }
            if ((PlayerType(auto51C7E2CA_var) == c_playerTypeUser)) {
                if ((PlayerGroupHasPlayer(gv_survivors, auto51C7E2CA_var) == true)) {
                    GameOver(auto51C7E2CA_var, c_gameOverVictory, true, true);
                }
                else {
                    GameOver(auto51C7E2CA_var, c_gameOverTie, true, true);
                }
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCondition_Init () {
    gt_VictoryCondition = TriggerCreate("gt_VictoryCondition_Func");
    TriggerAddEventUnitDied(gt_VictoryCondition, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AllianceTest
//--------------------------------------------------------------------------------------------------
bool gt_AllianceTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_secondWord;
    string lv_thirdWord;
    int lv_firstPlayer;
    int lv_secondPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_secondWord = StringWord(EventChatMessage(false), 2);
    lv_thirdWord = StringWord(EventChatMessage(false), 3);
    lv_firstPlayer = gv_pLAYER_SURVIVOR_BASE;
    lv_secondPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == "-alliancecheck"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_secondWord != null)) {
        lv_firstPlayer = StringToInt(lv_secondWord);
    }

    if ((lv_thirdWord != null)) {
        lv_secondPlayer = StringToInt(lv_thirdWord);
    }

    TextExpressionSetToken("Param/Expression/8A2F9162", "SourcePlayer", IntToText(lv_firstPlayer));
    TextExpressionSetToken("Param/Expression/8A2F9162", "TargetPlayer", IntToText(lv_secondPlayer));
    TextExpressionSetToken("Param/Expression/8A2F9162", "AlliedState", libNtve_gf_ConvertBooleanToText(libNtve_gf_PlayerIsEnemy(lv_firstPlayer, lv_secondPlayer, libNtve_ge_PlayerRelation_Ally)));
    TextExpressionSetToken("Param/Expression/8A2F9162", "PushableState", libNtve_gf_ConvertBooleanToText(PlayerGetAlliance(lv_firstPlayer, c_allianceIdPushable, lv_secondPlayer)));
    TextExpressionSetToken("Param/Expression/8A2F9162", "SpendState", libNtve_gf_ConvertBooleanToText(PlayerGetAlliance(lv_firstPlayer, c_allianceIdSpend, lv_secondPlayer)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/8A2F9162"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllianceTest_Init () {
    gt_AllianceTest = TriggerCreate("gt_AllianceTest_Func");
    TriggerAddEventChatMessage(gt_AllianceTest, c_playerAny, "-alliancecheck", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MineralPool
//--------------------------------------------------------------------------------------------------
bool gt_MineralPool_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_secondWord;
    fixed lv_mineralValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_secondWord = StringWord(EventChatMessage(false), 2);
    lv_mineralValue = 5000.0;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == "-pool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_secondWord != null)) {
        lv_mineralValue = StringToInt(lv_secondWord);
    }

    gf_AddMineralsToPool(lv_mineralValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPool_Init () {
    gt_MineralPool = TriggerCreate("gt_MineralPool_Func");
    TriggerAddEventChatMessage(gt_MineralPool, c_playerAny, "-pool", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitTag
//--------------------------------------------------------------------------------------------------
bool gt_UnitTag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1);

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }

        if (!((StringWord(EventChatMessage(false), 1) == "-tag"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/8D7666B2", "unitName", UnitGetName(lv_unit));
    TextExpressionSetToken("Param/Expression/8D7666B2", "unitTag", IntToText(UnitGetTag(lv_unit)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/8D7666B2"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitTag_Init () {
    gt_UnitTag = TriggerCreate("gt_UnitTag_Func");
    TriggerAddEventChatMessage(gt_UnitTag, c_playerAny, "-tag", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_VariableInitializaiton_Init();
    gt_RevealerInitialization_Init();
    gt_TestAllHeroes_Init();
    gt_TestManySpawns_Init();
    gt_AlienInitialization_Init();
    gt_AttackWaves_Init();
    gt_AttackWaveInitial_Init();
    gt_AlienInitialTrickle_Init();
    gt_AlienTrickle_Init();
    gt_FlankSnowRoaches_Init();
    gt_SetupInitialization_Init();
    gt_CreateHeroSelection_Init();
    gt_HeroSelection_Init();
    gt_FreeHeroes_Init();
    gt_SelectionTimeout_Init();
    gt_SkipCinematic_Init();
    gt_StartBattlecruiserScene_Init();
    gt_BattlecruiserCrash_Init();
    gt_EndCinematic_Init();
    gt_TutorialStart_Init();
    gt_TutorialChooseHeroBefore_Init();
    gt_TutorialChooseHeroAfter_Init();
    gt_TutorialMechanicalIntroduction_Init();
    gt_CrashedBattlecruiserDialog_Init();
    gt_SelectCrashedBattlecruiser_Init();
    gt_CrashedBattlecruiserDamaged_Init();
    gt_PlayerLeaves_Init();
    gt_PlayerDies_Init();
    gt_SharedMinerals_Init();
    gt_SideMObjectiveInit_Init();
    gt_SideMDropPod_Init();
    gt_SideMissionLoop_Init();
    gt_PlayerLosesCrashedBattlecruiser_Init();
    gt_CreateOjbectives_Init();
    gt_VictoryCondition_Init();
    gt_AllianceTest_Init();
    gt_MineralPool_Init();
    gt_UnitTag_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
