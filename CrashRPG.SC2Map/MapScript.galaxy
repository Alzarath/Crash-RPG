//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Crash RPG
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_survivorBasePlayer = 7;
const fixed gv_damageFraction = 0.0625;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_remainingSelectors;
playergroup gv_survivors;

void InitGlobals () {
    gv_survivors = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateSelectableHero (string lp_heroName);
void gf_UpdateTooltip (unit lp_affectedUnit, string lp_button, string lp_tooltip);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInitialization;
trigger gt_MineralReward;
trigger gt_HeroSelection;
trigger gt_CreateSelectableHeroes;
trigger gt_FreeHeroes;
trigger gt_Updatetooltips;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateSelectableHero (string lp_heroName) {
    // Variable Declarations
    point lv_creationPoint;

    // Variable Initialization

    // Implementation
    lv_creationPoint = PointFromName(("Selection - " + lp_heroName));
    libNtve_gf_UnitCreateFacingPoint(1, (("CRPG" + lp_heroName + "Level1")), 0, 0, lv_creationPoint, RegionGetCenter(RegionFromId(1)));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Invulnerable", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terranmedium", 0, 0, lv_creationPoint);
}

void gf_UpdateTooltip (unit lp_affectedUnit, string lp_button, string lp_tooltip) {
    // Variable Declarations
    int lv_damageModifier;
    int lv_damagePoints;

    // Variable Initialization

}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    int autoFAB08339_ae;
    int autoFAB08339_ai;
    int auto194EA66D_catalog;
    int auto194EA66D_i;

    // Variable Declarations
    string lv_unitType;
    int lv_pickedPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFAB08339_ae = 6;
    autoFAB08339_ai = 1;
    lv_pickedPlayer = 1;
    for ( ; ( (autoFAB08339_ai >= 0 && lv_pickedPlayer <= autoFAB08339_ae) || (autoFAB08339_ai <= 0 && lv_pickedPlayer >= autoFAB08339_ae) ) ; lv_pickedPlayer += autoFAB08339_ai ) {
        if ((PlayerType(lv_pickedPlayer) == c_playerTypeUser)) {
            PlayerGroupAdd(gv_survivors, lv_pickedPlayer);
            gv_remainingSelectors += 1;
            libNtve_gf_SetAlliance(lv_pickedPlayer, 8, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(lv_pickedPlayer, 0, libNtve_ge_AllianceSetting_Neutral);
            auto194EA66D_catalog = c_gameCatalogUnit;
            auto194EA66D_i = 1;
            for ( ; auto194EA66D_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto194EA66D_i += 1 ) {
                lv_unitType = CatalogEntryGet(auto194EA66D_catalog, auto194EA66D_i);
                if (((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ProtossUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ProtossStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergStory") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/HybridUnits") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/TerranCharacter") || (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "GlossaryCategory", c_playerAny) == "Unit/Category/ZergCharacter"))) {
                    TechTreeUnitHelp(lv_pickedPlayer, lv_unitType, false);
                }

            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CRPGCivilian", 0, lv_pickedPlayer, PointFromName(("Player " + IntToString(lv_pickedPlayer) + " Spawn")));
            UnitSelect(UnitLastCreated(), lv_pickedPlayer, true);
        }

    }
    PlayerGroupAdd(gv_survivors, gv_survivorBasePlayer);
    libNtve_gf_SetPlayerGroupAlliance(gv_survivors, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    AICampaignStart(8);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Reward
//--------------------------------------------------------------------------------------------------
bool gt_MineralReward_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(1, c_playerPropMinerals, c_playerPropOperAdd, (EventUnitXPDelta() / 5.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralReward_Init () {
    gt_MineralReward = TriggerCreate("gt_MineralReward_Func");
    TriggerAddEventUnitGainExperience(gt_MineralReward, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;

    // Variable Initialization
    lv_hero = UnitGroupClosestToPoint(UnitGroup(null, 0, RegionFromId(1), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    lv_player = UnitGetOwner(EventUnitTargetUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(lv_hero);
    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(lv_hero), c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(EventUnit()), RegionGetCenter(RegionFromId(1)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), UnitGroupClosestToPoint(UnitGroup("CRPGCrashedBattlecruiser", gv_survivorBasePlayer, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(1)))), c_orderQueueReplace);
    UnitSelect(UnitLastCreated(), lv_player, true);
    gv_remainingSelectors -= 1;
    if ((gv_remainingSelectors == 0)) {
        TriggerExecute(gt_FreeHeroes, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelection_Init () {
    gt_HeroSelection = TriggerCreate("gt_HeroSelection_Func");
    TriggerAddEventUnitAbility(gt_HeroSelection, null, AbilityCommand("BeaconGiveHero", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Selectable Heroes
//--------------------------------------------------------------------------------------------------
bool gt_CreateSelectableHeroes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateSelectableHero("Aero");
    gf_CreateSelectableHero("Fighter");
    gf_CreateSelectableHero("Hunter");
    gf_CreateSelectableHero("Infested");
    gf_CreateSelectableHero("Mech");
    gf_CreateSelectableHero("Sniper");
    gf_CreateSelectableHero("Vehicle");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateSelectableHeroes_Init () {
    gt_CreateSelectableHeroes = TriggerCreate("gt_CreateSelectableHeroes_Func");
    TriggerAddEventMapInit(gt_CreateSelectableHeroes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Free Heroes
//--------------------------------------------------------------------------------------------------
bool gt_FreeHeroes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", 7, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SupplyDepot", 7, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("SupplyDepotLower", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("Dialogue_Transmission5Seconds", 0), 0.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/20A0E835"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FreeHeroes_Init () {
    gt_FreeHeroes = TriggerCreate("gt_FreeHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update tooltips
//--------------------------------------------------------------------------------------------------
bool gt_Updatetooltips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageModifier;
    int lv_levelPoints;
    int lv_upgradePoints;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_levelPoints = (UnitBehaviorCount(UnitGroupUnit(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1), "LevelCounter") * CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "LevelCounter", "Modification.AttributeChangeArray[" + IntToString(1) + "].Points", EventPlayer()));
    lv_upgradePoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "CRPGBaseAttributes", "Modification.AttributeChangeArray[" + IntToString(1) + "].Points", EventPlayer());
    lv_damageModifier = (((lv_levelPoints + lv_upgradePoints) * gv_damageFraction) + 1.0);
    CatalogFieldValueSet(c_gameCatalogButton, "AeroYamatoCannon", "Tooltip", EventPlayer(), (("Blasts a target with a devastating plasma cannon, causing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AeroYamatoCannonDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "AeroLaserArmaments", "Tooltip", EventPlayer(), (("Automatically fire Laser Batteries that deal <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AeroLaserArmamentsDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage to enemies below the hero.")));
    CatalogFieldValueSet(c_gameCatalogButton, "HunterPsionicProjection", "Tooltip", EventPlayer(), (("After not attacking for 5 seconds, project a psionic orb that will attack with the unit, dealing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterProjectionBeamDamage", "Amount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterProjectionBeamCreatePersistent", "PeriodCount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Effect,HunterProjectionBeamCreatePersistent,PeriodCount * Effect,HunterProjectionBeamCreatePersistent,PeriodicPeriodArray[0]\"/> second. Can store up to 2.")));
    CatalogFieldValueSet(c_gameCatalogButton, "HunterScarabMine", "Tooltip", EventPlayer(), (("Scarab Mines pursue enemy units that come in range, detonating for <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterScarabMinesDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> damage and slowing nearby enemies in an area by <d ref=\"100 - (100 * Behavior,HunterSlowScarabMine,Modification.MoveSpeedMultiplier)\"/>% for <d ref=\"Behavior,HunterSlowScarabMine,Duration\"/> seconds.")));
    CatalogFieldValueSet(c_gameCatalogButton, "HunterScatterCannon", "Tooltip", EventPlayer(), (("Launch a volley of missiles, dealing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (5.0 * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HunterScatterCannonDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage in an area.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "MechBarrage", "Tooltip", EventPlayer(), (("Stuns all enemies in a small area. Deals <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechBarrageDamage", "Amount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechBarrageCreatePersistent", "PeriodCount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Effect,MechBarrageCreatePersistent,PeriodCount * Effect,MechBarrageCreatePersistent,PeriodicPeriodArray[0]\"/> seconds in a larger area.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "MechShockBlast", "Tooltip", EventPlayer(), (("Unleash a violent burst of energy, stunning and dealing up to <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MechShocking", "PeriodCount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MechShockBlastDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage to nearby enemies over <d ref=\"Behavior,MechShocked,Duration\"/> seconds.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperNuclearStrike", "Tooltip", EventPlayer(), (("Calls down a Nuclear Strike at a target location. Nuke takes <d ref=\"Effect,SniperNuclearStrikePersistent,InitialDelay + Effect,SniperNuclearStrikePersistent,ExpireDelay + Effect,SniperNuclearStrikeDetonate,InitialDelay\"/> seconds to land and deals up to <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> (<c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "Amount", EventPlayer()) + CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperNuclearStrikeDamage", "AttributeBonus[" + IntToString(7) + "]", EventPlayer()))), c_fixedPrecisionAny) + "</c> vs. Structure) damage to enemies in a large radius.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperSnipe", "Tooltip", EventPlayer(), (("A careful shot, dealing <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "Amount", EventPlayer())), c_fixedPrecisionAny) + "</c> (<c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "Amount", EventPlayer()) + CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperSniperRoundDamage", "AttributeBonus[" + IntToString(5) + "]", EventPlayer()))), c_fixedPrecisionAny) + "</c> vs. Psionic) damage.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c> <c val=\"#ColorAttackInfo\">Can only target biological units.</c>")));
    CatalogFieldValueSet(c_gameCatalogButton, "SniperToxicMunitions", "Tooltip", EventPlayer(), (("This unit's projectiles are coated in a deadly toxin that deals <c val=\"#ColorAttackInfo\">" + FixedToString((lv_damageModifier * (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SniperDeadlyToxinDamage", "PeriodCount", EventPlayer()) * CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SniperDeadlyToxinDamage", "Amount", EventPlayer()))), c_fixedPrecisionAny) + "</c> damage over <d ref=\"Behavior,SniperDeadlyToxinDamage,PeriodCount * Behavior,SniperDeadlyToxinDamage,Period\"/> seconds to any enemy damaged by it for the first time.<n/><n/><c val=\"#ColorGlueValue\">Ignores armor.</c>")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Updatetooltips_Init () {
    gt_Updatetooltips = TriggerCreate("gt_Updatetooltips_Func");
    TriggerAddEventUnitAbility(gt_Updatetooltips, null, AbilityCommand("CRPGUpgradeDamage", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitBehaviorChange(gt_Updatetooltips, null, "LevelCounter", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInitialization_Init();
    gt_MineralReward_Init();
    gt_HeroSelection_Init();
    gt_CreateSelectableHeroes_Init();
    gt_FreeHeroes_Init();
    gt_Updatetooltips_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
